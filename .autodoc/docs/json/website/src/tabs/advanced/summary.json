{
  "folderName": "advanced",
  "folderPath": ".autodoc/docs/json/website/src/tabs/advanced",
  "url": "https://github.com/AleoHQ/aleo/.autodoc/docs/json/website/src/tabs/advanced",
  "files": [
    {
      "fileName": "DecryptAccount.js",
      "filePath": "website/src/tabs/advanced/DecryptAccount.js",
      "url": "https://github.com/AleoHQ/aleo/website/src/tabs/advanced/DecryptAccount.js",
      "summary": "The `DecryptAccount` component in this code is responsible for decrypting an Aleo account's private key ciphertext using a password. This component is built using React and the Ant Design library for UI components.\n\nThe component maintains three state variables: `accountFromCiphertext`, `inputCiphertext`, and `inputPassword`. The `useAleoWASM` hook is used to access the Aleo WASM library, which provides cryptographic functions.\n\nTwo event handlers, `onCiphertextChange` and `onPasswordChange`, are defined to handle changes in the input fields for the private key ciphertext and the password, respectively. When either input changes, the corresponding event handler attempts to decrypt the private key ciphertext using the provided password. If successful, the decrypted account information is stored in `accountFromCiphertext`.\n\nThe `validateStatusAccount` function is used to determine the validation status of the password input field based on whether the decryption was successful or not.\n\nThe component's UI consists of a card containing a form with two input fields for the private key ciphertext and the password. If the decryption is successful, an additional form is displayed with the decrypted private key, view key, and address. These values can be copied to the clipboard using the `CopyButton` component.\n\nHere's an example of how the `DecryptAccount` component might be used in the larger project:\n\n```jsx\nimport React from 'react';\nimport { DecryptAccount } from './aleo/DecryptAccount';\n\nfunction App() {\n  return (\n    <div>\n      <h1>Aleo Account Decryptor</h1>\n      <DecryptAccount />\n    </div>\n  );\n}\n\nexport default App;\n```\n\nIn this example, the `DecryptAccount` component is rendered within the `App` component, which could be the main entry point of the Aleo project.",
      "questions": "1. **Question**: What is the purpose of the `useAleoWASM` hook in this code?\n   **Answer**: The `useAleoWASM` hook is used to access the Aleo WASM library, which provides cryptographic functions for the Aleo platform. It is used in this code to decrypt the private key ciphertext using the provided password.\n\n2. **Question**: How does the `onCiphertextChange` function work and when is it called?\n   **Answer**: The `onCiphertextChange` function is called when the input value for the \"Private Key Ciphertext\" field changes. It tries to create a `PrivateKeyCiphertext` object from the input value and decrypt it using the current password. If successful, it sets the decrypted account information in the `accountFromCiphertext` state.\n\n3. **Question**: How does the `validateStatusAccount` function determine the validation status of the account?\n   **Answer**: The `validateStatusAccount` function checks if the `inputPassword` state is not null and if the `accountFromCiphertext` state is not null. If both conditions are met, it returns \"success\", indicating that the account has been successfully decrypted. If not, it returns \"error\" if the password is not null, or an empty string if the password is null."
    },
    {
      "fileName": "EncryptAccount.js",
      "filePath": "website/src/tabs/advanced/EncryptAccount.js",
      "url": "https://github.com/AleoHQ/aleo/website/src/tabs/advanced/EncryptAccount.js",
      "summary": "The `EncryptAccount` component in this code is responsible for generating and encrypting an Aleo account. It uses the `useState` hook to manage the state of the account, encrypted account, loading status, and password. The `useAleoWASM` hook is used to access the Aleo WASM library.\n\nThe `generateAccount` function creates a new Aleo private key and sets it as the account state. The `encryptAccount` function encrypts the private key using the provided password and sets the encrypted account state. The `clear` function resets the state of the account, password, and encrypted account.\n\nThe `onPasswordChange` function updates the password state when the user inputs a new password. The `privateKey`, `viewKey`, `address`, `encryptedPrivateKey`, and `passwordString` functions are used to convert the state values to strings for display purposes.\n\nThe component renders a form with buttons to generate a new account, clear the form, and encrypt the account. When an account is generated, the form displays the private key, view key, and address. The user can input a password to encrypt the account, and the encrypted private key is displayed as ciphertext.\n\nHere's an example of the component's usage:\n\n```jsx\nimport { EncryptAccount } from \"./path/to/EncryptAccount\";\n\nfunction App() {\n  return (\n    <div>\n      <EncryptAccount />\n    </div>\n  );\n}\n\nexport default App;\n```\n\nThis component can be used in the larger Aleo project to provide users with an interface for creating and encrypting their accounts, ensuring the security of their private keys.",
      "questions": "1. **Question**: What is the purpose of the `useAleoWASM` hook in this code?\n   **Answer**: The `useAleoWASM` hook is used to interact with the Aleo WebAssembly module, which provides cryptographic functionalities for the Aleo project. It is used to generate and encrypt account information in this component.\n\n2. **Question**: How does the `EncryptAccount` component handle the generation and encryption of account information?\n   **Answer**: The `EncryptAccount` component uses the `generateAccount` function to create a new private key using the Aleo WebAssembly module. It then uses the `encryptAccount` function to encrypt the private key with a user-provided password.\n\n3. **Question**: What is the purpose of the `clear` function in this component?\n   **Answer**: The `clear` function is used to reset the state of the component, clearing any generated account information, encrypted account data, and the user-provided password."
    }
  ],
  "folders": [],
  "summary": "The `advanced` folder contains two main components, `DecryptAccount.js` and `EncryptAccount.js`, which are responsible for decrypting and encrypting Aleo accounts, respectively. These components are built using React and the Ant Design library for UI components and utilize the Aleo WASM library for cryptographic functions.\n\n`DecryptAccount.js` provides a UI for users to input their encrypted private key ciphertext and a password. The component maintains three state variables: `accountFromCiphertext`, `inputCiphertext`, and `inputPassword`. It defines two event handlers, `onCiphertextChange` and `onPasswordChange`, to handle changes in the input fields. When either input changes, the corresponding event handler attempts to decrypt the private key ciphertext using the provided password. If successful, the decrypted account information is stored in `accountFromCiphertext`. The component's UI consists of a card containing a form with two input fields and, if the decryption is successful, an additional form displaying the decrypted private key, view key, and address.\n\nExample usage of `DecryptAccount` component:\n\n```jsx\nimport React from 'react';\nimport { DecryptAccount } from './aleo/DecryptAccount';\n\nfunction App() {\n  return (\n    <div>\n      <h1>Aleo Account Decryptor</h1>\n      <DecryptAccount />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n`EncryptAccount.js` provides a UI for users to generate a new Aleo account and encrypt the private key using a password. The component uses the `useState` hook to manage the state of the account, encrypted account, loading status, and password. It defines functions `generateAccount`, `encryptAccount`, and `clear` to create a new Aleo private key, encrypt the private key using the provided password, and reset the state, respectively. The `onPasswordChange` function updates the password state when the user inputs a new password. The component renders a form with buttons to generate a new account, clear the form, and encrypt the account. When an account is generated, the form displays the private key, view key, and address. The user can input a password to encrypt the account, and the encrypted private key is displayed as ciphertext.\n\nExample usage of `EncryptAccount` component:\n\n```jsx\nimport { EncryptAccount } from \"./path/to/EncryptAccount\";\n\nfunction App() {\n  return (\n    <div>\n      <EncryptAccount />\n    </div>\n  );\n}\n\nexport default App;\n```\n\nThese components can be used in the larger Aleo project to provide users with an interface for creating, encrypting, and decrypting their accounts, ensuring the security of their private keys.",
  "questions": ""
}
{
  "folderName": "rest",
  "folderPath": ".autodoc/docs/json/website/src/tabs/rest",
  "url": "https://github.com/AleoHQ/aleo/.autodoc/docs/json/website/src/tabs/rest",
  "files": [
    {
      "fileName": "GetBlockByHash.js",
      "filePath": "website/src/tabs/rest/GetBlockByHash.js",
      "url": "https://github.com/AleoHQ/aleo/website/src/tabs/rest/GetBlockByHash.js",
      "summary": "The `GetBlockByHash` component in this code is a React component that allows users to search for a specific block in the Aleo blockchain by its hash. It uses the Ant Design library for UI components and Axios for making API requests.\n\nWhen the user enters a block hash in the search bar and submits the search, the `onSearch` function is called, which in turn calls the `tryRequest` function. The `tryRequest` function sends an API request to the Aleo VM server at `https://vm.aleo.org/api/testnet3/block/${hash}` to fetch the block data corresponding to the given hash.\n\nIf the API request is successful, the response data is stored in the `blockByHash` state variable as a formatted JSON string, and the `status` state variable is set to \"success\". If there's an error, the `status` state variable is set to \"error\", and the error is logged to the console.\n\nThe component renders a card with a search bar for the user to input the block hash. If the `blockByHash` state variable is not null, meaning a block has been fetched, the component renders a form with a read-only text area displaying the block data and a copy button to copy the block data to the clipboard.\n\nHere's an example of how the `GetBlockByHash` component might be used in the larger project:\n\n```jsx\nimport React from 'react';\nimport { GetBlockByHash } from './aleo/GetBlockByHash';\n\nfunction App() {\n  return (\n    <div>\n      <h1>Aleo Blockchain Explorer</h1>\n      <GetBlockByHash />\n    </div>\n  );\n}\n\nexport default App;\n```\n\nIn this example, the `GetBlockByHash` component is used in the main `App` component to allow users to search for blocks in the Aleo blockchain.",
      "questions": "1. **Question**: What is the purpose of the `tryRequest` function and how does it handle errors?\n   **Answer**: The `tryRequest` function is responsible for making an API request to the Aleo server to fetch a block by its hash. It handles errors by catching them and setting the `status` state to \"error\" while also logging the error to the console.\n\n2. **Question**: How does the `onSearch` function work and when is it called?\n   **Answer**: The `onSearch` function is called when the user enters a value in the search bar and presses enter or clicks the search button. It calls the `tryRequest` function with the entered value as its argument.\n\n3. **Question**: What is the purpose of the `blockString` function and how is it used in the component?\n   **Answer**: The `blockString` function is used to convert the `blockByHash` state value to a string. It is used in the `value` prop of the `Input.TextArea` component to display the fetched block data and in the `data` prop of the `CopyButton` component to provide the data to be copied."
    },
    {
      "fileName": "GetBlockByHeight.js",
      "filePath": "website/src/tabs/rest/GetBlockByHeight.js",
      "url": "https://github.com/AleoHQ/aleo/website/src/tabs/rest/GetBlockByHeight.js",
      "summary": "The `GetBlockByHeight` component in this code is a React component that allows users to search for a specific block in the Aleo blockchain by its height. It uses the `antd` library for UI components and `axios` for making API requests.\n\nWhen the user enters a block height in the search bar and submits the search, the `onSearch` function is called, which in turn calls the `tryRequest` function with the entered height value. The `tryRequest` function sets the `blockByHeight` state to `null` and makes an API request to `https://vm.aleo.org/api/testnet3/block/${height}` using `axios`. If the request is successful, the response data is stored in the `blockByHeight` state as a formatted JSON string, and the `status` state is set to `\"success\"`. If there's an error, the `status` state is set to `\"error\"`.\n\nThe component renders a `Card` containing a `Form` with an `Input.Search` field for the user to enter the block height. When the `blockByHeight` state is not `null`, it also renders a `Divider`, a `Row` containing a `Form.Item` with an `Input.TextArea` displaying the block data, and a `CopyButton` component to copy the block data to the clipboard.\n\nHere's an example of how the `GetBlockByHeight` component might be used in the larger project:\n\n```jsx\nimport React from 'react';\nimport { GetBlockByHeight } from './aleo/GetBlockByHeight';\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Aleo Blockchain Explorer</h1>\n      <GetBlockByHeight />\n    </div>\n  );\n};\n\nexport default App;\n```\n\nIn this example, the `GetBlockByHeight` component is included in the main `App` component, allowing users to search for blocks by height in the Aleo blockchain explorer.",
      "questions": "1. **Question**: What is the purpose of the `GetBlockByHeight` component?\n   **Answer**: The `GetBlockByHeight` component is a React component that allows users to search for a block by its height and displays the block information in a formatted manner.\n\n2. **Question**: How does the `tryRequest` function handle errors?\n   **Answer**: The `tryRequest` function handles errors by using a try-catch block and setting the `status` state to \"error\" when an error occurs. It also logs the error to the console using `console.error(error)`.\n\n3. **Question**: What is the purpose of the `CopyButton` component?\n   **Answer**: The `CopyButton` component is a custom button that allows users to copy the block information displayed in the `Input.TextArea` to their clipboard."
    },
    {
      "fileName": "GetProgram.js",
      "filePath": "website/src/tabs/rest/GetProgram.js",
      "url": "https://github.com/AleoHQ/aleo/website/src/tabs/rest/GetProgram.js",
      "summary": "The `GetProgram` component in this code is a React functional component that allows users to search for a program by its ID and display its bytecode. It uses the `antd` library for the UI components and `axios` for making API requests.\n\nThe component maintains three state variables: `program`, `programID`, and `status`. `program` stores the bytecode of the fetched program, `programID` stores the user input for the program ID, and `status` stores the validation status of the input field.\n\nThe `onChange` function updates the `programID` state when the user types in the input field or clicks the \"Demo\" button. The `onSearch` function is called when the user submits the search, which in turn calls the `tryRequest` function.\n\nThe `tryRequest` function makes an API request to `https://vm.aleo.org/api/testnet3/program/${id}` using `axios`. If the request is successful, it sets the `status` to \"success\" and updates the `program` state with the fetched bytecode. If the request fails, it sets the `status` to \"error\" and resets the `program` state to `null`.\n\nThe component renders a `Card` containing a `Form` with an input field for the program ID. When a valid program ID is entered and the program bytecode is fetched, the bytecode is displayed in a `TextArea` component. A `CopyButton` component is provided to copy the bytecode to the clipboard.\n\nHere's an example of how the `GetProgram` component might be used in the larger project:\n\n```jsx\nimport React from 'react';\nimport { GetProgram } from './aleo';\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Search for a Program</h1>\n      <GetProgram />\n    </div>\n  );\n};\n\nexport default App;\n```\n\nIn this example, the `GetProgram` component is imported and used in the `App` component, allowing users to search for programs by their IDs and view their bytecodes.",
      "questions": "1. **Question:** What is the purpose of the `tryRequest` function and how does it handle errors?\n   **Answer:** The `tryRequest` function is responsible for making an API request to fetch the program bytecode with the given program id. It handles errors by catching them and setting the program state to `null`, status state to `\"error\"`, and logging the error to the console.\n\n2. **Question:** How does the `onChange` function work and what is its role in the component?\n   **Answer:** The `onChange` function is triggered when the user changes the input value in the search bar or clicks the \"Demo\" button. It updates the `programID` state with the new input value and returns the updated `programID`.\n\n3. **Question:** How is the `CopyButton` component used in this code and what data does it receive?\n   **Answer:** The `CopyButton` component is used to copy the program bytecode to the clipboard. It receives the `programString()` as its data, which is the program bytecode fetched from the API."
    },
    {
      "fileName": "GetTransaction.js",
      "filePath": "website/src/tabs/rest/GetTransaction.js",
      "url": "https://github.com/AleoHQ/aleo/website/src/tabs/rest/GetTransaction.js",
      "summary": "The `GetTransaction` component in this code is a React functional component that allows users to search for a specific transaction on the Aleo testnet blockchain by its transaction ID. The component uses the Ant Design library for its UI components and Axios for making API requests.\n\nWhen a user enters a transaction ID in the search bar and submits the form, the `onSearch` function is called, which in turn calls the `tryRequest` function with the entered transaction ID as its argument. The `tryRequest` function sets the `transaction` state to `null` and makes an API request to the Aleo testnet blockchain using Axios. If the request is successful, the response data is stored in the `transaction` state as a formatted JSON string, and the `status` state is set to \"success\". If there's an error, the `status` state is set to \"error\".\n\nThe component renders a card with a form containing an input field for the transaction ID. The input field has a search button and allows clearing the input. The `onSearch` function is called when the search button is clicked or the user presses the Enter key. If the `transaction` state is not `null`, a new form is displayed below the input field, containing a read-only text area with the transaction data and a copy button to copy the transaction data to the clipboard.\n\nHere's an example of how the `GetTransaction` component might be used in the larger project:\n\n```jsx\nimport React from 'react';\nimport { GetTransaction } from './aleo/GetTransaction';\n\nfunction App() {\n  return (\n    <div>\n      <h1>Aleo Transaction Explorer</h1>\n      <GetTransaction />\n    </div>\n  );\n}\n\nexport default App;\n```\n\nIn this example, the `GetTransaction` component is imported and used in the main `App` component, allowing users to search for transactions on the Aleo testnet blockchain.",
      "questions": "1. **Question:** What is the purpose of the `GetTransaction` component and how does it fetch the transaction data?\n\n   **Answer:** The `GetTransaction` component is a React functional component that allows users to search for a transaction by its ID. It fetches the transaction data by making an API call to `https://vm.aleo.org/api/testnet3/transaction/${id}` using the `axios` library.\n\n2. **Question:** How does the `onSearch` function handle errors and what happens when the search bar is empty?\n\n   **Answer:** The `onSearch` function calls the `tryRequest` function inside a try-catch block to handle any errors that may occur during the API call. If the search bar is empty, the `tryRequest` function resets the status to an empty string and does not make an API call.\n\n3. **Question:** What is the purpose of the `transactionString` function and how is it used in the component?\n\n   **Answer:** The `transactionString` function is used to convert the transaction data (if available) to a string format. It is used in the `Input.TextArea` component to display the transaction data and in the `CopyButton` component to provide the data to be copied."
    }
  ],
  "folders": [],
  "summary": "The `rest` folder contains React components that interact with the Aleo blockchain through API requests. These components allow users to search for blocks, transactions, and programs by their respective identifiers (hash, height, or ID). The components use the Ant Design library for UI components and Axios for making API requests.\n\n1. **GetBlockByHash.js**: This component allows users to search for a specific block by its hash. When a user submits a search, the `tryRequest` function sends an API request to the Aleo VM server to fetch the block data. The fetched data is displayed in a read-only text area with a copy button.\n\n   Example usage:\n\n   ```jsx\n   import React from 'react';\n   import { GetBlockByHash } from './aleo/GetBlockByHash';\n\n   function App() {\n     return (\n       <div>\n         <h1>Aleo Blockchain Explorer</h1>\n         <GetBlockByHash />\n       </div>\n     );\n   }\n\n   export default App;\n   ```\n\n2. **GetBlockByHeight.js**: This component allows users to search for a specific block by its height. Similar to `GetBlockByHash`, it sends an API request to fetch the block data and displays it in a read-only text area with a copy button.\n\n   Example usage:\n\n   ```jsx\n   import React from 'react';\n   import { GetBlockByHeight } from './aleo/GetBlockByHeight';\n\n   const App = () => {\n     return (\n       <div>\n         <h1>Aleo Blockchain Explorer</h1>\n         <GetBlockByHeight />\n       </div>\n     );\n   };\n\n   export default App;\n   ```\n\n3. **GetProgram.js**: This component allows users to search for a program by its ID and display its bytecode. It sends an API request to fetch the program bytecode and displays it in a text area with a copy button.\n\n   Example usage:\n\n   ```jsx\n   import React from 'react';\n   import { GetProgram } from './aleo';\n\n   const App = () => {\n     return (\n       <div>\n         <h1>Search for a Program</h1>\n         <GetProgram />\n       </div>\n     );\n   };\n\n   export default App;\n   ```\n\n4. **GetTransaction.js**: This component allows users to search for a specific transaction by its transaction ID. It sends an API request to fetch the transaction data and displays it in a read-only text area with a copy button.\n\n   Example usage:\n\n   ```jsx\n   import React from 'react';\n   import { GetTransaction } from './aleo/GetTransaction';\n\n   function App() {\n     return (\n       <div>\n         <h1>Aleo Transaction Explorer</h1>\n         <GetTransaction />\n       </div>\n     );\n   }\n\n   export default App;\n   ```\n\nThese components can be used together in a larger project, such as an Aleo blockchain explorer, to provide users with the ability to search for and view details about blocks, transactions, and programs on the Aleo blockchain.",
  "questions": ""
}
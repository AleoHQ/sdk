{
  "folderName": "third-party",
  "folderPath": ".autodoc/docs/json/sdk/docs/scripts/third-party",
  "url": "https://github.com/AleoHQ/aleo/.autodoc/docs/json/sdk/docs/scripts/third-party",
  "files": [
    {
      "fileName": "Apache-License-2.0.txt",
      "filePath": "sdk/docs/scripts/third-party/Apache-License-2.0.txt",
      "url": "https://github.com/AleoHQ/aleo/sdk/docs/scripts/third-party/Apache-License-2.0.txt",
      "summary": "This code file contains the Apache License Version 2.0, which is a widely used open-source software license. The purpose of this license is to define the terms and conditions for using, reproducing, and distributing the software and its source code in the Aleo project. The license ensures that the software can be freely used, modified, and shared, while protecting the rights of the original authors and contributors.\n\nThe license starts by defining key terms such as \"License\", \"Licensor\", \"Legal Entity\", \"You\", \"Source\", \"Object\", \"Work\", \"Derivative Works\", \"Contribution\", and \"Contributor\". These definitions are essential for understanding the scope and applicability of the license.\n\nSections 2 and 3 of the license grant copyright and patent licenses to the users, allowing them to reproduce, prepare derivative works, publicly display, perform, sublicense, and distribute the work in both source and object forms. These licenses are perpetual, worldwide, non-exclusive, royalty-free, and irrevocable, subject to certain conditions.\n\nSection 4 outlines the conditions for redistribution of the work or derivative works, such as providing a copy of the license, stating any changes made, retaining copyright and attribution notices, and including a NOTICE file if applicable.\n\nSection 5 deals with the submission of contributions to the project, stating that any contribution submitted for inclusion in the work shall be under the terms and conditions of the Apache License, unless explicitly stated otherwise.\n\nSection 6 clarifies that the license does not grant permission to use the trademarks, service marks, or product names of the licensor, except as required for reasonable and customary use in describing the origin of the work.\n\nSections 7 and 8 provide disclaimers of warranty and limitations of liability, stating that the work is provided on an \"AS IS\" basis, without any warranties or conditions, and that contributors shall not be liable for any damages arising from the use or inability to use the work.\n\nSection 9 allows users to offer additional support, warranty, indemnity, or other liability obligations while redistributing the work or derivative works, but only on their own behalf and under their sole responsibility.\n\nThe appendix provides instructions on how to apply the Apache License to a user's work, including the boilerplate notice to be attached to the work with the appropriate copyright information.\n\nIn summary, this code file contains the Apache License that governs the use, modification, and distribution of the Aleo project's software and source code, ensuring that it remains open-source and freely available while protecting the rights of the original authors and contributors.",
      "questions": "1. **What is the purpose of this code file?**\n\n   This code file contains the Apache License, Version 2.0, which is a legal document that defines the terms and conditions for using, reproducing, and distributing the software or project it is attached to.\n\n2. **How does this license affect the use and distribution of the project?**\n\n   The Apache License allows users to freely use, modify, and distribute the project, as long as they comply with the terms and conditions specified in the license, such as providing a copy of the license with any distributed works and retaining copyright notices.\n\n3. **What are the warranty and liability limitations under this license?**\n\n   The Apache License provides the work on an \"AS IS\" basis, without any warranties or conditions, and limits the liability of contributors to any damages arising from the use or inability to use the work. However, users may choose to offer and charge a fee for additional support, warranty, indemnity, or other liability obligations, acting on their own behalf and sole responsibility."
    },
    {
      "fileName": "fuse.js",
      "filePath": "sdk/docs/scripts/third-party/fuse.js",
      "url": "https://github.com/AleoHQ/aleo/sdk/docs/scripts/third-party/fuse.js",
      "summary": "The code is an implementation of Fuse.js, a lightweight fuzzy-search library that provides a simple way to search for approximate matches of a pattern within a collection of strings or objects. It is particularly useful for searching through large datasets, where exact matches may not always be possible or practical.\n\nThe library exposes a `Fuse` constructor that accepts a collection of data and an options object. The options object allows users to customize various aspects of the search, such as case sensitivity, scoring, and tokenization. The main functionality of the library is provided by the `search` method, which takes a search query and returns an array of results sorted by relevance.\n\nThe code is organized into several classes and functions that handle different aspects of the search process:\n\n- `E`: Represents an index of the data collection, which is used to speed up searches. It provides methods for adding and removing items, as well as searching for matches.\n- `N`: Represents a search pattern and provides methods for searching within a string or an object.\n- `D`: A base class for search strategies, which are used to search for matches using different algorithms. Several subclasses are provided, such as `K` (exact match), `B` (include match), `W` (prefix-exact match), and `V` (fuzzy match).\n- `X`: A function that parses a search query and returns an array of search strategies.\n- `Z`: A search strategy that uses extended search syntax, allowing users to combine multiple search strategies in a single query.\n\nHere's an example of how to use the library:\n\n```javascript\nconst data = ['apple', 'banana', 'cherry'];\nconst options = { includeScore: true, threshold: 0.4 };\nconst fuse = new Fuse(data, options);\n\nconst results = fuse.search('aple');\n// Results: [{ item: 'apple', refIndex: 0, score: 0.25 }]\n```\n\nIn this example, we create a new `Fuse` instance with a collection of fruit names and a custom threshold for fuzzy matching. We then search for the string 'aple', which returns a single result with a score indicating the relevance of the match.",
      "questions": "1. **What is the purpose of this code?**\n\n   This code is for Fuse.js v6.4.6, a lightweight fuzzy-search library. It provides functionality for searching and matching text with a fuzzy matching algorithm, allowing for approximate string matching.\n\n2. **What are the main features of this library?**\n\n   The main features of this library include:\n   - Fuzzy searching with customizable options such as case sensitivity, threshold, and distance.\n   - Support for searching in both strings and objects.\n   - Ability to include matches and scores in the search results.\n   - Customizable sorting of search results.\n   - Extended search capabilities with logical operators.\n\n3. **How can a developer customize the search options?**\n\n   A developer can customize the search options by passing an options object when creating a new Fuse instance. Some of the available options include `isCaseSensitive`, `includeMatches`, `minMatchCharLength`, `ignoreLocation`, `findAllMatches`, `location`, `threshold`, and `distance`."
    },
    {
      "fileName": "hljs-line-num-original.js",
      "filePath": "sdk/docs/scripts/third-party/hljs-line-num-original.js",
      "url": "https://github.com/AleoHQ/aleo/sdk/docs/scripts/third-party/hljs-line-num-original.js",
      "summary": "This code is a part of the `aleo` project and provides line numbering functionality for code blocks highlighted using the `highlight.js` library. It adds line numbers to the code blocks and ensures consistent copy/paste behavior across all browsers.\n\nThe code starts by checking if `highlight.js` is available and then adds the necessary functions to the `hljs` object. It also adds the required CSS styles for line numbering.\n\nThe `initLineNumbersOnLoad` function initializes line numbering for all code blocks on the page when the document is ready. It processes each code block and adds line numbers if the plugin is not disabled for that block.\n\nThe `lineNumbersBlock` and `lineNumbersValue` functions are used to add line numbers to a given code block element or a string value, respectively. They both internally call the `lineNumbersInternal` function, which processes the code block, duplicates multiline nodes if necessary, and adds line numbers using the `addLineNumbersBlockFor` function.\n\nThe `addLineNumbersBlockFor` function generates an HTML table with line numbers and code lines as table rows. It also handles the options for starting line numbers and displaying line numbers for single-line code blocks.\n\nThe code also includes helper functions for handling options, duplicating multiline nodes, and getting line count. Additionally, it has a `copy` event listener to ensure consistent copy/paste behavior across all browsers, including a workaround for Microsoft Edge.\n\nHere's an example of how to use this code in an HTML file:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <link rel=\"stylesheet\" href=\"path/to/highlight.js/styles/default.css\">\n  <script src=\"path/to/highlight.js\"></script>\n  <script src=\"path/to/this-file.js\"></script>\n  <script>hljs.initHighlightingOnLoad(); hljs.initLineNumbersOnLoad();</script>\n</head>\n<body>\n  <pre><code class=\"hljs\" data-ln-start-from=\"10\">Your code here</code></pre>\n</body>\n</html>\n```\n\nThis will initialize the `highlight.js` library and the line numbering plugin, adding line numbers to the code block starting from line 10.",
      "questions": "1. **What is the purpose of this code?**\n\n   This code is a plugin for the highlight.js library that adds line numbers to the highlighted code blocks. It handles various edge cases and ensures consistent copy/paste behavior across all browsers.\n\n2. **How does the plugin handle line numbering for multiline elements in the code block?**\n\n   The plugin uses the `duplicateMultilineNodes` function to perform a deep traversal of child nodes and calls the `duplicateMultilineNode` function on each node to fix multi-line elements implementation in highlight.js. It wraps each line in a `<span>` element with the same class as the original element and adds a line break after each line.\n\n3. **How can I disable the plugin for a specific code block?**\n\n   To disable the plugin for a specific code block, add the `nohljsln` class to the code block element. The `isPluginDisabledForBlock` function checks if the element has this class and skips line numbering for that block if the class is present."
    },
    {
      "fileName": "hljs-line-num.js",
      "filePath": "sdk/docs/scripts/third-party/hljs-line-num.js",
      "url": "https://github.com/AleoHQ/aleo/sdk/docs/scripts/third-party/hljs-line-num.js",
      "summary": "This code is a part of the Aleo project and provides line numbering functionality for code blocks that are highlighted using the `highlight.js` library. The code is written as an Immediately Invoked Function Expression (IIFE) to avoid polluting the global namespace.\n\nThe main purpose of this code is to add line numbers to code blocks that are highlighted using `highlight.js`. It does this by modifying the HTML structure of the code blocks and adding additional elements for line numbers. The code also handles the copy event to ensure that the line numbers are not copied when a user selects and copies the code.\n\nThe code provides the following functions:\n\n1. `hljs.initLineNumbersOnLoad(options)`: Initializes the line numbering functionality on page load. It takes an optional `options` object as a parameter.\n2. `hljs.lineNumbersBlock(element, options)`: Adds line numbers to a specific code block. It takes an `element` and an optional `options` object as parameters.\n3. `hljs.lineNumbersValue(value, options)`: Returns the HTML string with line numbers for a given code string. It takes a `value` and an optional `options` object as parameters.\n\nExample usage:\n\n```javascript\n// Initialize line numbering on page load\nhljs.initLineNumbersOnLoad();\n\n// Add line numbers to a specific code block\nvar codeBlock = document.querySelector(\"code.hljs\");\nhljs.lineNumbersBlock(codeBlock);\n\n// Get the HTML string with line numbers for a given code string\nvar codeString = \"function hello() {\\n  console.log('Hello, world!');\\n}\";\nvar numberedCode = hljs.lineNumbersValue(codeString);\n```\n\nThe code also includes utility functions for string manipulation, splitting text by line, and counting the number of lines in a string. Additionally, it handles the copy event to ensure that the line numbers are not copied when a user selects and copies the code.",
      "questions": "1. **Question**: What is the purpose of this code?\n   **Answer**: This code is a minified JavaScript file that appears to be related to adding line numbers to code blocks formatted with the `highlight.js` library.\n\n2. **Question**: How does this code integrate with `highlight.js`?\n   **Answer**: This code extends the `highlight.js` library by adding functions like `initLineNumbersOnLoad`, `lineNumbersBlock`, and `lineNumbersValue` to the `hljs` object.\n\n3. **Question**: How can I customize the line numbering behavior?\n   **Answer**: You can customize the line numbering behavior by passing an options object to the `initLineNumbersOnLoad` function, which can include properties like `singleLine` and `startFrom`."
    },
    {
      "fileName": "popper.js",
      "filePath": "sdk/docs/scripts/third-party/popper.js",
      "url": "https://github.com/AleoHQ/aleo/sdk/docs/scripts/third-party/popper.js",
      "summary": "The code provided is a minified version of the Popper.js library (v2.11.5), which is a positioning engine for tooltips, popovers, and other floating elements. It is designed to calculate the position of an element (the \"popper\") relative to another element (the \"reference\") while considering various constraints, such as viewport boundaries, scrollable containers, and user-defined offsets.\n\nThe library exposes a `createPopper` function that takes two elements (reference and popper) and an optional configuration object as arguments. It returns an instance with methods like `update`, `forceUpdate`, and `destroy` to manage the popper's position.\n\n```javascript\nimport { createPopper } from '@popperjs/core';\n\nconst referenceElement = document.querySelector('#reference');\nconst popperElement = document.querySelector('#popper');\n\nconst popperInstance = createPopper(referenceElement, popperElement, {\n  placement: 'right',\n  modifiers: [\n    {\n      name: 'offset',\n      options: {\n        offset: [0, 8],\n      },\n    },\n  ],\n});\n```\n\nThe library also provides a lighter version called `createPopperLite`, which includes only the essential modifiers for basic positioning.\n\nThe code includes various utility functions for handling DOM elements, such as `f` for getting the dimensions and position of an element, `c` for getting the scroll position of an element, and `m` for calculating the position of an element relative to another element.\n\nIt also defines several modifiers that can be used to customize the behavior of the popper, such as `flip`, `preventOverflow`, `arrow`, and `hide`. These modifiers can be added to the configuration object when creating a popper instance.\n\nIn summary, this code is a positioning library that helps developers create and manage the position of floating elements like tooltips and popovers relative to other elements while considering various constraints.",
      "questions": "1. **Question**: What is the purpose of this code?\n   **Answer**: This code is the implementation of the Popper.js library (v2.11.5), which is a positioning engine used to manage elements like tooltips, popovers, and dropdowns in web applications. It helps in calculating the position of an element relative to another element, handling various edge cases, and providing a flexible and extensible API.\n\n2. **Question**: What are the main functions provided by this library?\n   **Answer**: The main functions provided by this library include `createPopper`, `createPopperLite`, `popperGenerator`, and various modifiers like `applyStyles`, `arrow`, `computeStyles`, `eventListeners`, `flip`, `hide`, `offset`, and `preventOverflow`. These functions and modifiers help in creating and managing the position of elements in a web application.\n\n3. **Question**: How can a developer use this library in their project?\n   **Answer**: A developer can use this library by importing it into their project and then using the provided functions and modifiers to create and manage the position of elements. For example, they can use the `createPopper` function to create a new Popper instance for a tooltip element and its reference element, and then use the various modifiers to customize the positioning behavior as needed."
    },
    {
      "fileName": "tippy.js",
      "filePath": "sdk/docs/scripts/third-party/tippy.js",
      "url": "https://github.com/AleoHQ/aleo/sdk/docs/scripts/third-party/tippy.js",
      "summary": "The code provided is a minified version of the Tippy.js library, which is a highly customizable tooltip and popover library. Tippy.js is used to create tooltips, popovers, and other similar UI elements that appear when users interact with elements on a webpage. The library is built on top of the Popper.js library, which is used for positioning the tooltips and popovers.\n\nThe Tippy.js library provides a simple API for creating tooltips and popovers with various options for customization. Some of the key features of the library include:\n\n- Customizable content: The content of the tooltip or popover can be plain text, HTML, or even a DOM element.\n- Customizable appearance: The library provides options for changing the appearance of the tooltip or popover, such as the background color, font size, and border radius.\n- Customizable animations: The library supports various animations for showing and hiding the tooltip or popover, such as fade, scale, and shift.\n- Event handling: The library provides options for controlling when the tooltip or popover should be shown or hidden, based on user interactions such as mouseenter, focus, and click events.\n- Accessibility: The library ensures that the tooltips and popovers are accessible to screen readers and keyboard users.\n\nHere's",
      "questions": "1. **What is the purpose of this code?**\n\n   This code is for a library called Tippy.js, which is a highly customizable tooltip and popover library. It provides functionality for creating tooltips and popovers with various options, such as animations, themes, and interactivity.\n\n2. **How does this code handle different input types and events?**\n\n   The code handles different input types and events by using event listeners and checking the type of the event. For example, it checks if the event is a touch event or a mouse event and handles them accordingly. It also checks for specific event types like \"mouseenter\", \"mouseleave\", \"focus\", and \"blur\" to trigger the tooltip or popover.\n\n3. **How does this code handle customizations and plugins?**\n\n   The code allows for customizations through the use of default properties and user-defined properties. It also supports plugins by providing a `plugins` array in the default properties, which can be extended with user-defined plugins. The plugins can have their own properties and methods, which can be used to extend or modify the functionality of the library."
    },
    {
      "fileName": "tocbot.min.js",
      "filePath": "sdk/docs/scripts/third-party/tocbot.min.js",
      "url": "https://github.com/AleoHQ/aleo/sdk/docs/scripts/third-party/tocbot.min.js",
      "summary": "This code is part of the `aleo` project and provides functionality for generating a table of contents (TOC) based on the headings present in a given HTML content. The TOC is generated as a nested list of links, allowing users to easily navigate through the content by clicking on the desired heading.\n\nThe code consists of three main parts:\n\n1. `ParseContent`: This function is responsible for parsing the HTML content and extracting the headings. It takes into account various options such as ignoring certain selectors, including HTML content, and handling hidden elements. The extracted headings are then organized into a nested array based on their heading levels.\n\n   Example usage:\n\n   ```javascript\n   var parsedContent = ParseContent(options);\n   var headingsArray = parsedContent.nestHeadingsArray(headings);\n   ```\n\n2. `BuildHtml`: This function is responsible for generating the TOC HTML structure based on the nested headings array. It creates a nested list of links with appropriate classes and attributes, such as active link and collapsible list classes. It also provides methods for updating the TOC when the user scrolls through the content.\n\n   Example usage:\n\n   ```javascript\n   var htmlBuilder = BuildHtml(options);\n   var tocElement = htmlBuilder.render(tocContainer, headingsArray);\n   ```\n\n3. `tocbot`: This is the main object that exposes the public API for initializing, refreshing, and destroying the TOC functionality. It combines the functionality of `ParseContent` and `BuildHtml` to generate the TOC and attach the necessary event listeners for updating the TOC as the user scrolls through the content.\n\n   Example usage:\n\n   ```javascript\n   tocbot.init({\n     tocSelector: '.js-toc',\n     contentSelector: '.js-content',\n     headingSelector: 'h1, h2, h3',\n   });\n   ```\n\nIn the larger project, this code can be used to automatically generate a table of contents for any HTML content with headings, making it easier for users to navigate through the content and improving the overall user experience.",
      "questions": "1. **Question**: What is the purpose of the `defaultOptions` object and what are the available options?\n   **Answer**: The `defaultOptions` object contains the default configuration options for the tocbot library. These options include settings for selectors, classes, scroll behavior, and rendering options, among others.\n\n2. **Question**: How does the `ParseContent` function work and what does it return?\n   **Answer**: The `ParseContent` function takes a configuration object as an argument and returns an object with two methods: `nestHeadingsArray` and `selectHeadings`. These methods are used to parse the content of the page, select the headings based on the provided configuration, and nest them in a hierarchical structure.\n\n3. **Question**: How can a developer customize the behavior of the tocbot library, such as changing the scroll duration or using a different selector for headings?\n   **Answer**: A developer can customize the behavior of the tocbot library by passing a configuration object with the desired options when calling `tocbot.init()`. For example, to change the scroll duration, they can pass an object with the `scrollSmoothDuration` property set to the desired value. Similarly, to use a different selector for headings, they can pass an object with the `headingSelector` property set to the desired selector."
    }
  ],
  "folders": [],
  "summary": "The `.autodoc/docs/json/sdk/docs/scripts/third-party` folder contains various third-party libraries and scripts that are used in the Aleo project to provide additional functionality and improve the user experience. These libraries and scripts include:\n\n1. **Apache-License-2.0.txt**: This file contains the Apache License Version 2.0, which governs the use, modification, and distribution of the Aleo project's software and source code, ensuring that it remains open-source and freely available while protecting the rights of the original authors and contributors.\n\n2. **fuse.js**: A lightweight fuzzy-search library that allows searching for approximate matches of a pattern within a collection of strings or objects. It can be used in the Aleo project to search through large datasets where exact matches may not always be possible or practical. Example usage:\n\n   ```javascript\n   const data = ['apple', 'banana', 'cherry'];\n   const options = { includeScore: true, threshold: 0.4 };\n   const fuse = new Fuse(data, options);\n\n   const results = fuse.search('aple');\n   // Results: [{ item: 'apple', refIndex: 0, score: 0.25 }]\n   ```\n\n3. **hljs-line-num-original.js** and **hljs-line-num.js**: These scripts provide line numbering functionality for code blocks highlighted using the `highlight.js` library. They add line numbers to the code blocks and ensure consistent copy/paste behavior across all browsers. Example usage:\n\n   ```html\n   <!DOCTYPE html>\n   <html>\n   <head>\n     <link rel=\"stylesheet\" href=\"path/to/highlight.js/styles/default.css\">\n     <script src=\"path/to/highlight.js\"></script>\n     <script src=\"path/to/this-file.js\"></script>\n     <script>hljs.initHighlightingOnLoad(); hljs.initLineNumbersOnLoad();</script>\n   </head>\n   <body>\n     <pre><code class=\"hljs\" data-ln-start-from=\"10\">Your code here</code></pre>\n   </body>\n   </html>\n   ```\n\n4. **popper.js**: A positioning library for tooltips, popovers, and other floating elements. It calculates the position of an element relative to another element while considering various constraints, such as viewport boundaries, scrollable containers, and user-defined offsets. This library can be used in the Aleo project to create and manage the position of floating UI elements.\n\n5. **tippy.js**: A highly customizable tooltip and popover library built on top of Popper.js. It can be used in the Aleo project to create tooltips, popovers, and other similar UI elements that appear when users interact with elements on a webpage.\n\n6. **tocbot.min.js**: A script that generates a table of contents (TOC) based on the headings present in a given HTML content. The TOC is generated as a nested list of links, allowing users to easily navigate through the content by clicking on the desired heading. This script can be used in the Aleo project to automatically generate a table of contents for any HTML content with headings, improving the overall user experience. Example usage:\n\n   ```javascript\n   tocbot.init({\n     tocSelector: '.js-toc',\n     contentSelector: '.js-content',\n     headingSelector: 'h1, h2, h3',\n   });\n   ```\n\nThese third-party libraries and scripts enhance the functionality of the Aleo project by providing additional features such as fuzzy search, line numbering for code blocks, tooltips and popovers, and table of contents generation. They can be integrated into the project to improve the user experience and make it easier for developers to work with the project.",
  "questions": ""
}
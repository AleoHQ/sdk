{
  "folderName": "styles",
  "folderPath": ".autodoc/docs/json/sdk/docs/styles",
  "url": "https://github.com/AleoHQ/aleo/.autodoc/docs/json/sdk/docs/styles",
  "files": [
    {
      "fileName": "clean-jsdoc-theme-base.css",
      "filePath": "sdk/docs/styles/clean-jsdoc-theme-base.css",
      "url": "https://github.com/AleoHQ/aleo/sdk/docs/styles/clean-jsdoc-theme-base.css",
      "summary": "This code is a CSS (Cascading Style Sheets) file that defines the styling and layout for the Aleo project's web pages. It is responsible for the visual appearance of the project, including typography, colors, layout, and responsive design for different screen sizes.\n\nThe code starts by defining custom font faces for headings, body text, and code snippets using the `@font-face` rule. It then sets some global styles, such as box-sizing, margin, padding, and font properties for various HTML elements like headings, paragraphs, lists, and links.\n\nThe code also includes styles for specific components and sections of the web pages, such as badges, blockquotes, tables, and code blocks. For example, it defines the appearance of tables with proper spacing, border-radius, and sticky headers. It also styles code blocks with syntax highlighting, line numbers, and a copy-to-clipboard button.\n\nThe layout of the web pages is designed using Flexbox, with a fixed sidebar on the left, a top navigation bar, and a main content area that adjusts its padding based on the screen size. The code also includes styles for a table of contents (TOC) on the right side of the screen, which is hidden on smaller screens.\n\nThe CSS file also includes styles for a search functionality, with a fixed search container, input box, and search results. Additionally, it provides styles for a mobile menu icon and a mobile sidebar, which are only displayed on smaller screens.\n\nIn summary, this CSS file is responsible for the overall look and feel of the Aleo project's web pages, ensuring a consistent and responsive design across different devices and screen sizes.",
      "questions": "1. **Question**: What are the custom font faces being used in this project and where are they being loaded from?\n   **Answer**: There are three custom font faces being used in this project: 'heading', 'body', and 'code'. They are being loaded from the '../fonts/' directory with the respective font files: 'WorkSans-Bold.ttf', 'OpenSans-Regular.ttf', and 'Inconsolata-Regular.ttf'.\n\n2. **Question**: How are the styles for different heading levels (h1, h2, h3, h4, h5, h6) defined in this code?\n   **Answer**: The styles for different heading levels are defined by setting the 'font-family' to 'heading', 'font-weight' to 'normal', and 'line-height' to 1.75. Each heading level also has a specific 'font-size' and some have a 'margin' defined.\n\n3. **Question**: How are the styles for the sidebar and table of contents (toc) being handled in this code for different screen sizes?\n   **Answer**: The styles for the sidebar and table of contents are being handled using media queries. For screens with a width of 100em or less, the 'toc-container' is hidden, and the 'main-content' padding is adjusted. For screens with a width between 65em and 100em, the 'mobile-sidebar-container' is hidden, and the 'navbar-container' is adjusted. For screens with a width of 65em or less, the 'sidebar-container' is hidden, and the 'main-content', 'navbar-container', and 'footer' are adjusted accordingly."
    },
    {
      "fileName": "clean-jsdoc-theme-dark.css",
      "filePath": "sdk/docs/styles/clean-jsdoc-theme-dark.css",
      "url": "https://github.com/AleoHQ/aleo/sdk/docs/styles/clean-jsdoc-theme-dark.css",
      "summary": "This code is a CSS (Cascading Style Sheets) file that defines the styling and appearance of various HTML elements in the Aleo project. The purpose of this code is to provide a consistent and visually appealing design across the entire project.\n\nThe CSS file covers a wide range of elements, including text, links, headings, sidebars, navigation bars, footers, tables, code blocks, blockquotes, and search components. It also includes styling for syntax highlighting in code blocks using the `hljs` (highlight.js) library.\n\nFor example, the `body` element has a dark background color (`#1a1a1a`) and white text color (`#fff`). Links (`a` elements) have a blue color (`#00bbff`) and change to a darker blue when active. Headings (`h1` to `h6`) have a white color.\n\nThe sidebar has a dark background color (`#222`) and a lighter text color (`#999`). When hovering over a sidebar section title, the background color changes to `#252525`. The navigation bar has a similar dark background color (`#1a1a1a`) and lighter text/icons color (`#999`). When hovering over a navigation item, the background color changes to `#202020`.\n\nCode blocks have a dark background color (`#333`) and use various colors for syntax highlighting, such as `#ff7b72` for keywords and `#30ac7c` for template variables.\n\nThe CSS file also includes styling for scrollbars, with a dark track color (`#333`) and a slightly lighter thumb color (`#555`).\n\nOverall, this CSS file contributes to the Aleo project by providing a visually appealing and consistent design for various elements, making it easier for users to navigate and interact with the project.",
      "questions": "1. **Question:** What is the purpose of the `::selection` CSS rule in this code?\n   **Answer:** The `::selection` CSS rule is used to style the text that is selected by the user. In this case, it sets the background color to `#ffce76` and the text color to `#222` when the text is selected.\n\n2. **Question:** How does this code handle styling for different heading levels (h1, h2, h3, etc.)?\n   **Answer:** This code applies the same styling to all heading levels (h1, h2, h3, h4, h5, and h6) by setting their text color to `#fff` (white).\n\n3. **Question:** How does this code style the scrollbar?\n   **Answer:** This code styles the scrollbar using the `::-webkit-scrollbar-track` and `::-webkit-scrollbar-thumb` pseudo-elements. The scrollbar track has a background color of `#333`, while the scrollbar thumb has a background color of `#555` and an outline of `0.06125rem` solid `#555`."
    },
    {
      "fileName": "clean-jsdoc-theme-light.css",
      "filePath": "sdk/docs/styles/clean-jsdoc-theme-light.css",
      "url": "https://github.com/AleoHQ/aleo/sdk/docs/styles/clean-jsdoc-theme-light.css",
      "summary": "This code is a CSS (Cascading Style Sheets) file that defines the styling for the \"light\" theme of the Aleo project. The purpose of this code is to provide a visually appealing and consistent appearance for the user interface elements, such as text, links, buttons, and backgrounds, when the light theme is selected.\n\nThe code is organized into sections, each targeting specific elements or groups of elements in the project. For example, the `.light a, .light a:active` section defines the color of links and active links in the light theme. Similarly, the `.light .sidebar` section sets the background color and text color for the sidebar.\n\nSome sections target more specific elements, such as headings (`.light h1, .light h2, ...`), tables (`.light table td, .light .params td`), and code blocks (`.light .hljs-comment, .light .hljs-quote`). These sections ensure that the appearance of these elements is consistent with the overall light theme.\n\nThe code also includes styling for interactive elements, such as buttons and tooltips. For example, the `.light .icon-button:hover` section defines the background color when a user hovers over an icon button. The `.light .tooltip` section sets the background and text color for tooltips.\n\nIn the larger project, this CSS file would be applied when the user selects the light theme, providing a cohesive and visually appealing appearance for the user interface. The code ensures that all elements, from text and links to buttons and tooltips, are styled consistently and in line with the chosen theme.",
      "questions": "1. **Question**: What is the purpose of the `.light` class and its related styles in this code?\n   **Answer**: The `.light` class and its related styles are used to define the appearance of various elements in the light theme of the Aleo project. This includes setting background colors, text colors, and other styling properties for different elements like headers, links, tables, and code blocks.\n\n2. **Question**: How are the colors for syntax highlighting in code blocks defined in the `.light` theme?\n   **Answer**: The colors for syntax highlighting in code blocks are defined using the `.light .hljs-*` classes, where `*` represents different code elements like comments, keywords, strings, etc. Each class sets the `color` property to a specific color value for that element in the light theme.\n\n3. **Question**: How does the `.light` theme handle styling for tooltips and scrollbars?\n   **Answer**: The `.light` theme styles tooltips using the `.light .tooltip` class, which sets the background color and text color for tooltips. For scrollbars, the `.light ::-webkit-scrollbar-track` and `.light ::-webkit-scrollbar-thumb` classes are used to style the scrollbar track and thumb, respectively, with specific background colors and outlines."
    },
    {
      "fileName": "clean-jsdoc-theme.min.css",
      "filePath": "sdk/docs/styles/clean-jsdoc-theme.min.css",
      "url": "https://github.com/AleoHQ/aleo/sdk/docs/styles/clean-jsdoc-theme.min.css",
      "summary": "This code is a CSS (Cascading Style Sheets) file that defines the styling and layout for the Aleo project's user interface. It is responsible for the visual appearance of the project, including typography, colors, layout, and responsive design for different screen sizes.\n\nThe code starts by defining custom font faces for headings, body text, and code elements using the `@font-face` rule. It then sets global styles, such as box-sizing, margin, and padding for all elements. The `html` and `body` elements are styled with a minimum height, width, and line-height.\n\nTypography styles are defined for headings (h1 to h6), paragraphs, lists, and other text elements. The code also includes styles for images, links, and blockquotes. Specific classes are used to style elements like tables, code blocks, and tooltips.\n\nThe layout of the user interface is designed using Flexbox, with a sidebar, table of contents, and main content area. The code includes responsive design using media queries to adapt the layout for different screen sizes. For example, the table of contents is hidden on smaller screens, and the sidebar is replaced with a mobile menu.\n\nThe code also includes styles for a search feature, including a search input field, search results, and a close button. The search feature is designed to be fixed on the screen and overlay the main content.\n\nIn summary, this CSS file is responsible for the visual appearance and layout of the Aleo project's user interface, ensuring a consistent and responsive design across different devices and screen sizes.",
      "questions": "1. **What are the custom font faces used in this code?**\n\n   The custom font faces used in this code are \"heading\" (WorkSans-Bold.ttf), \"body\" (OpenSans-Regular.ttf), and \"code\" (Inconsolata-Regular.ttf).\n\n2. **How are the different font sizes for headings (h1, h2, h3, h4, h5, h6) defined in this code?**\n\n   The font sizes for headings are defined as follows: h1 (3.5rem), h2 (2.25rem), h3 (1.5rem), h4 (1.25rem), h5 (1rem), and h6 (1rem).\n\n3. **How are the styles for the scrollbar defined in this code?**\n\n   The styles for the scrollbar are defined using the `::-webkit-scrollbar`, `::-webkit-scrollbar-track`, and `::-webkit-scrollbar-thumb` pseudo-elements. The scrollbar width and height are set to 0.3125rem, the track background is set to #333 (dark mode) or #ddd (light mode), and the thumb background is set to #555 (dark mode) or #aaa (light mode) with an outline of the same color."
    }
  ],
  "folders": [],
  "summary": "The `.autodoc/docs/json/sdk/docs/styles` folder contains CSS files that define the styling and layout for the Aleo project's user interface. These files ensure a consistent and visually appealing appearance across the entire project, including typography, colors, layout, and responsive design for different screen sizes.\n\nThe `clean-jsdoc-theme-base.css` file sets the foundation for the project's web pages, defining custom font faces, global styles, and specific components such as badges, blockquotes, tables, and code blocks. The layout is designed using Flexbox, with a fixed sidebar, top navigation bar, and main content area. The file also includes styles for a search functionality and a mobile menu.\n\nFor example, to style a table with proper spacing and border-radius, the following code is used:\n\n```css\ntable {\n  border-collapse: separate;\n  border-spacing: 0;\n  border-radius: 4px;\n  overflow: hidden;\n}\n```\n\nThe `clean-jsdoc-theme-dark.css` and `clean-jsdoc-theme-light.css` files define the styling for the dark and light themes, respectively. These files cover a wide range of elements, including text, links, headings, sidebars, navigation bars, footers, tables, code blocks, and search components. They also include styling for syntax highlighting in code blocks using the `hljs` (highlight.js) library.\n\nFor example, to style the body element with a dark background color and white text color in the dark theme, the following code is used:\n\n```css\n.light body {\n  background-color: #1a1a1a;\n  color: #fff;\n}\n```\n\nThe `clean-jsdoc-theme.min.css` file is a minified version of the base CSS file, providing the same styling and layout but with a smaller file size for faster loading times.\n\nIn the larger project, these CSS files work together to provide a cohesive and visually appealing appearance for the user interface. The base CSS file sets the foundation, while the dark and light theme files customize the appearance based on the user's preference. The minified version of the base CSS file ensures faster loading times for the project's web pages.\n\nDevelopers working with the Aleo project can use these CSS files to style their components and ensure a consistent appearance across the entire project. They can also customize the dark and light themes by modifying the respective CSS files, or create new themes by following the same structure.",
  "questions": ""
}
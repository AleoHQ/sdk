{
  "folderName": "docs",
  "folderPath": ".autodoc/docs/json/sdk/docs",
  "url": "https://github.com/AleoHQ/aleo/.autodoc/docs/json/sdk/docs",
  "files": [
    {
      "fileName": "DevelopmentClient_DevelopmentClient.html",
      "filePath": "sdk/docs/DevelopmentClient_DevelopmentClient.html",
      "url": "https://github.com/AleoHQ/aleo/sdk/docs/DevelopmentClient_DevelopmentClient.html",
      "summary": "This code defines the structure and functionality of a web page that documents the `DevelopmentClient` class in the Aleo project. The `DevelopmentClient` class is used to interact with an Aleo Development Server.\n\nThe web page is structured with a sidebar containing navigation links to other classes in the project, a top navigation bar with search functionality, and a main content area displaying the details of the `DevelopmentClient` class.\n\nThe `DevelopmentClient` class has a constructor that takes a single parameter, `baseURL`, which is the URL of the Aleo Development Server. The constructor is documented with a description, parameter details, and source file information.\n\nThe web page also includes various JavaScript and CSS files to handle interactivity, styling, and search functionality. The `tocbot` library is used to generate a table of contents for the page, and the `fuse.js` library is used for search functionality.\n\nHere's an example of how the `DevelopmentClient` class can be used in the larger project:\n\n```javascript\nconst client = new DevelopmentClient(\"https://example.com/aleo-server\");\n```\n\nThis creates a new instance of the `DevelopmentClient` class, which can then be used to interact with the Aleo Development Server at the specified URL.",
      "questions": "1. **Question**: What is the purpose of the `DevelopmentClient` class?\n   **Answer**: The `DevelopmentClient` class is used to create a new DevelopmentClient instance to interact with an Aleo Development Server.\n\n2. **Question**: What parameter does the `DevelopmentClient` constructor take?\n   **Answer**: The `DevelopmentClient` constructor takes a single parameter `baseURL`, which is a string representing the URL of the Aleo Development Server.\n\n3. **Question**: How can I change the theme of the documentation page?\n   **Answer**: You can change the theme of the documentation page by clicking on the theme-toggle button in the top-right corner of the page. This will toggle between light and dark themes."
    },
    {
      "fileName": "account.ts.html",
      "filePath": "sdk/docs/account.ts.html",
      "url": "https://github.com/AleoHQ/aleo/sdk/docs/account.ts.html",
      "summary": "This code defines the `Account` class for the Aleo project, which is responsible for key management, account creation, and message signing and verification. The class provides functionality for creating a new Aleo account, importing an existing account from a private key or seed, and signing and verifying messages.\n\nAn Aleo account is generated from a randomly generated seed, from which an account private key, view key, and a public account address are derived. The `Account` class provides methods for encrypting and decrypting the account's private key, decrypting records, checking if an account owns a ciphertext record, signing messages, and verifying signatures.\n\nHere are some examples of how the `Account` class can be used:\n\n- Create a new account: `let myRandomAccount = new Account();`\n- Create an account from a randomly generated seed: `let mySeededAccount = new Account({seed: seed});`\n- Create an account from an existing private key: `let myExistingAccount = new Account({privateKey: 'myExistingPrivateKey'})`\n- Sign a message: `let signature = myRandomAccount.sign(hello_world)`\n- Verify a signature: `myRandomAccount.verify(hello_world, signature)`\n\nThe code also includes a static method `fromCiphertext` that allows creating an account from a private key ciphertext and a password. Additionally, it provides methods for working with records, such as `decryptRecord`, `decryptRecords`, and `ownsRecordCiphertext`.",
      "questions": "1. **What is the purpose of the `Account` class in this code?**\n\n   The `Account` class is a key management class that enables the creation of a new Aleo Account, importation of an existing account from an existing private key or seed, and message signing and verification functionality. It provides methods for encrypting and decrypting records, signing messages, and verifying signatures.\n\n2. **How can an account be created from an existing private key or a randomly generated seed?**\n\n   To create an account from an existing private key, you can pass an object with the `privateKey` property to the `Account` constructor, like this: `let myExistingAccount = new Account({privateKey: 'myExistingPrivateKey'})`. To create an account from a randomly generated seed, you can pass an object with the `seed` property to the `Account` constructor, like this: `let mySeededAccount = new Account({seed: seed})`.\n\n3. **How can a message be signed and verified using the `Account` class?**\n\n   To sign a message, you can use the `sign` method of the `Account` class, like this: `let signature = myRandomAccount.sign(hello_world)`. To verify a signature, you can use the `verify` method of the `Account` class, like this: `myRandomAccount.verify(hello_world, signature)`."
    },
    {
      "fileName": "aleo_network_client.ts.html",
      "filePath": "sdk/docs/aleo_network_client.ts.html",
      "url": "https://github.com/AleoHQ/aleo/sdk/docs/aleo_network_client.ts.html",
      "summary": "This code defines a class `AleoNetworkClient` that manages connections and REST calls to publicly exposed endpoints of Aleo nodes. The class provides methods to interact with the Aleo Blockchain, such as fetching blocks, transactions, and other related information.\n\nThe `AleoNetworkClient` constructor takes a `host` parameter, which is the base URL of the Aleo node to connect to. The class also has methods to set and get an `Account` object, which represents an Aleo account.\n\nSome of the key methods in this class include:\n\n- `getBlock(height: number)`: Fetches the block contents of the block at the specified block height.\n- `getBlockRange(start: number, end: number)`: Fetches a range of blocks between the specified block heights.\n- `getProgram(programId: string)`: Fetches the source code of a program.\n- `getLatestBlock()`: Fetches the block contents of the latest block.\n- `getTransaction(id: string)`: Fetches a transaction by its unique identifier.\n- `getTransactions(height: number)`: Fetches the transactions present at the specified block height.\n- `getTransactionsInMempool()`: Fetches the transactions in the memory pool.\n- `findUnspentRecords(...)`: Attempts to find unspent records in the Aleo blockchain for a specified private key.\n\nHere's an example of how to use the `AleoNetworkClient` class:\n\n```javascript\n// Connection to a local node\nlet local_connection = new AleoNetworkClient(\"http://localhost:3030\");\n\n// Connection to a public beacon node\nlet public_connection = new AleoNetworkClient(\"https://vm.aleo.org/api\");\n\n// Set an account\nlet account = new Account();\nconnection.setAccount(account);\n\n// Get the latest block\nlet latestBlock = connection.getLatestBlock();\n```\n\nThis class can be used in the larger Aleo project to interact with the Aleo Blockchain, fetch information, and perform various operations related to accounts, blocks, and transactions.",
      "questions": "1. **What is the purpose of the `AleoNetworkClient` class?**\n\n   The `AleoNetworkClient` class is a connection management class that encapsulates REST calls to publicly exposed endpoints of Aleo nodes. The methods provided in this class provide information on the Aleo Blockchain.\n\n2. **How can I set an account for the `AleoNetworkClient` instance?**\n\n   You can set an account for the `AleoNetworkClient` instance by calling the `setAccount(account: Account)` method and passing an `Account` object as an argument.\n\n3. **How can I fetch the latest block height using the `AleoNetworkClient` class?**\n\n   You can fetch the latest block height by calling the `getLatestHeight()` method on an instance of the `AleoNetworkClient` class. This method returns a Promise that resolves to the latest block height or an Error if there is an issue fetching the data."
    },
    {
      "fileName": "development_client.ts.html",
      "filePath": "sdk/docs/development_client.ts.html",
      "url": "https://github.com/AleoHQ/aleo/sdk/docs/development_client.ts.html",
      "summary": "This code defines a `DevelopmentClient` class for interacting with an Aleo Development Server. The Aleo Development Server is a Rust-based server that runs all the proving and verification operations needed to deploy and execute programs on the Aleo Network. This client sends RESTful requests to the server and returns the resulting transaction_id.\n\nThe `DevelopmentClient` class has the following methods:\n\n1. `constructor(baseURL: string)`: Initializes a new DevelopmentClient instance with the given baseURL of the Aleo Development Server.\n\n2. `sendRequest<T>(path: string, request: any)`: Sends a request to the specified path with the given request data and returns the response.\n\n3. `deployProgram(program: string, fee: number, privateKey?: string, password?: string, feeRecord?: string)`: Deploys a program on the Aleo Network via an Aleo development server. Returns the transaction_id of the deployment transaction if successful.\n\n4. `executeProgram(programId: string, programFunction: string, fee: number, inputs: string[], privateKey?: string, password?: string, feeRecord?: string)`: Executes a program on the Aleo Network via an Aleo development server. Returns the transaction_id of the execution transaction if successful.\n\n5. `transfer(amount: number, fee: number, recipient: string, privateKey?: string, password?: string, feeRecord?: string, amountRecord?: string)`: Sends an amount in credits to a specified recipient on the Aleo Network via an Aleo development server. Returns the transaction_id of the execution transaction if successful.\n\nExample usage:\n\n```javascript\nconst Program = 'program yourprogram.aleo;\\n\\nfunction main:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n';\nconst client = new DevelopmentClient(\"http://0.0.0.0:4040\");\nconst transaction_id = await client.deployProgram(Program, 6000000, privateKeyString);\n```\n\nThis code is useful for developers who want to interact with the Aleo Development Server to deploy and execute programs on the Aleo Network.",
      "questions": "1. **What is the purpose of the `DevelopmentClient` class in this code?**\n\n   The `DevelopmentClient` class is designed to provide a TypeScript and JavaScript API for deploying and executing programs on the Aleo Network using an Aleo Development Server. It sends RESTful requests to the server and returns the resulting transaction_id.\n\n2. **How does the `deployProgram` function work in the `DevelopmentClient` class?**\n\n   The `deployProgram` function deploys a program on the Aleo Network via an Aleo development server. It takes parameters such as the program text, fee, private key, password, and fee record, and sends a request to the development server. If successful, it returns the transaction_id of the deployment transaction.\n\n3. **What is the purpose of the `transfer` function in the `DevelopmentClient` class?**\n\n   The `transfer` function sends an amount in credits to a specified recipient on the Aleo Network via an Aleo development server. It takes parameters such as the amount, fee, recipient, private key, password, fee record, and amount record, and sends a request to the development server. If successful, it returns the transaction_id of the execution transaction."
    },
    {
      "fileName": "index.html",
      "filePath": "sdk/docs/index.html",
      "url": "https://github.com/AleoHQ/aleo/sdk/docs/index.html",
      "summary": "This code is an HTML file that serves as the main entry point for the Aleo SDK documentation website. The Aleo SDK provides high-level utilities in JavaScript for handling Accounts, Records, and Node connections in the browser. It uses the `@aleohq/wasm` package under the hood.\n\nThe file contains the following sections:\n\n1. **Header**: The header includes meta tags, title, and external script and stylesheet references. It also contains SVG symbol definitions that are used as icons throughout the website.\n\n2. **Body**: The body is divided into several parts:\n   - Sidebar: Contains navigation links to different sections of the documentation, such as Classes (Account, AleoNetworkClient, DevelopmentClient).\n   - Navbar: Contains buttons for search, theme toggle, and font size adjustment.\n   - Table of Contents: Displays a list of headings on the current page.\n   - Main Content: Displays the content of the documentation, including a brief introduction to the Aleo SDK, build guide, and links to related Aleo tools and repositories.\n   - Search Container: Provides a search functionality for the documentation.\n   - Mobile Menu: Contains a button to toggle the mobile sidebar and navigation links.\n\n3. **Scripts**: The file includes several JavaScript files for handling the core functionality, search, and table of contents. The `tocbot` library is used to generate the table of contents, and the `fuse.js` library is used for search functionality.\n\nThis file serves as a starting point for users to explore the Aleo SDK documentation and learn how to use the SDK in their projects.",
      "questions": "1. **What is the purpose of this code?**\n\n   This code is the main HTML file for the Aleo SDK documentation website. It includes the necessary scripts, styles, and structure for the website, as well as the content for the homepage.\n\n2. **What are the main dependencies used in this code?**\n\n   The main dependencies used in this code are the following JavaScript libraries: `hljs.js`, `hljs-line-num.js`, `popper.js`, `tippy.js`, `tocbot.min.js`, `core.min.js`, `search.min.js`, and `fuse.js`.\n\n3. **How can I regenerate the documentation?**\n\n   To regenerate the documentation, you can run the following command: `npx jsdoc --configure jsdoc.json --verbose`."
    }
  ],
  "folders": [
    {
      "folderName": "data",
      "folderPath": ".autodoc/docs/json/sdk/docs/data",
      "url": "https://github.com/AleoHQ/aleo/.autodoc/docs/json/sdk/docs/data",
      "files": [
        {
          "fileName": "search.json",
          "filePath": "sdk/docs/data/search.json",
          "url": "https://github.com/AleoHQ/aleo/sdk/docs/data/search.json",
          "summary": "This code is part of the Aleo project and provides a set of functionalities for managing accounts, interacting with the Aleo blockchain, and deploying and executing programs on the Aleo network. The code is organized into three main classes: `Account`, `AleoNetworkClient`, and `DevelopmentClient`.\n\nThe `Account` class provides methods for creating an account from a private key ciphertext, encrypting and decrypting records, checking if an account owns a ciphertext record, and signing and verifying messages with the account's private key. For example, to create an account from a private key ciphertext, you can use the `Account.fromCiphertext` method.\n\nThe `AleoNetworkClient` class is responsible for interacting with the Aleo blockchain. It provides methods for finding unspent records, getting account information, retrieving blocks and block ranges, fetching the latest block, hash, and height, and querying transactions and programs. For instance, to get the latest block, you can use the `AleoNetworkClient.getLatestBlock` method.\n\nThe `DevelopmentClient` class is designed for deploying and executing programs on the Aleo network using an Aleo Development Server. It provides methods for deploying a program (`deployProgram`), executing a program (`executeProgram`), and transferring credits between accounts (`transfer`). Note that an Aleo Development Server must be running locally or remotely for these methods to work.\n\nHere's an example of how to use the `DevelopmentClient` class to deploy a program:\n\n```javascript\nconst devClient = new DevelopmentClient();\ndevClient.deployProgram(programSourceCode);\n```\n\nOverall, this code provides a comprehensive set of tools for developers to interact with the Aleo network and manage accounts, transactions, and programs.",
          "questions": "1. **Question**: What is the purpose of the `Account.fromCiphertext` method?\n   **Answer**: The `Account.fromCiphertext` method attempts to create an account from a private key ciphertext.\n\n2. **Question**: How does the `AleoNetworkClient#getBlockRange` method work?\n   **Answer**: The `AleoNetworkClient#getBlockRange` method returns a range of blocks between the specified block heights.\n\n3. **Question**: What does the `DevelopmentClient#transfer` method do?\n   **Answer**: The `DevelopmentClient#transfer` method sends an amount in credits to a specified recipient on the Aleo Network via an Aleo development server."
        }
      ],
      "folders": [],
      "summary": "The `search.json` file in the `.autodoc/docs/json/sdk/docs/data` folder is part of the Aleo project and serves as a comprehensive set of tools for developers to interact with the Aleo network and manage accounts, transactions, and programs. The code is organized into three main classes: `Account`, `AleoNetworkClient`, and `DevelopmentClient`.\n\nThe `Account` class offers methods for managing accounts, such as creating an account from a private key ciphertext, encrypting and decrypting records, checking if an account owns a ciphertext record, and signing and verifying messages with the account's private key. For example, to create an account from a private key ciphertext, you can use the following code:\n\n```javascript\nconst account = Account.fromCiphertext(privateKeyCiphertext);\n```\n\nThe `AleoNetworkClient` class is responsible for interacting with the Aleo blockchain. It provides methods for finding unspent records, getting account information, retrieving blocks and block ranges, fetching the latest block, hash, and height, and querying transactions and programs. For instance, to get the latest block, you can use the following code:\n\n```javascript\nconst aleoClient = new AleoNetworkClient();\nconst latestBlock = await aleoClient.getLatestBlock();\n```\n\nThe `DevelopmentClient` class is designed for deploying and executing programs on the Aleo network using an Aleo Development Server. It provides methods for deploying a program (`deployProgram`), executing a program (`executeProgram`), and transferring credits between accounts (`transfer`). Note that an Aleo Development Server must be running locally or remotely for these methods to work. Here's an example of how to use the `DevelopmentClient` class to deploy a program:\n\n```javascript\nconst devClient = new DevelopmentClient();\ndevClient.deployProgram(programSourceCode);\n```\n\nIn summary, the `search.json` file provides a set of functionalities that enable developers to manage accounts, interact with the Aleo blockchain, and deploy and execute programs on the Aleo network. These tools are essential for building and testing applications on the Aleo platform, and they work together with other parts of the project to provide a seamless development experience.",
      "questions": ""
    },
    {
      "folderName": "scripts",
      "folderPath": ".autodoc/docs/json/sdk/docs/scripts",
      "url": "https://github.com/AleoHQ/aleo/.autodoc/docs/json/sdk/docs/scripts",
      "files": [
        {
          "fileName": "core.js",
          "filePath": "sdk/docs/scripts/core.js",
          "url": "https://github.com/AleoHQ/aleo/sdk/docs/scripts/core.js",
          "summary": "This code is responsible for handling various UI features and interactions in the Aleo project's documentation website. The primary functionalities include theme toggling, accordion behavior, font size adjustment, and code block interactions.\n\n1. **Theme Toggling**: The `toggleTheme` function is responsible for switching between dark and light themes. It updates the `data-theme` attribute, the class list of the body element, and the localStorage to store the user's theme preference.\n\n2. **Accordion Behavior**: The `initAccordion` function initializes the accordion behavior for the sidebar sections. It sets up click event listeners for each sidebar section title and toggles the `data-isopen` attribute to expand or collapse the section. The accordion state is stored in localStorage to persist the user's preference.\n\n3. **Font Size Adjustment**: The code provides functions to increment, decrement, and reset the font size of the content. The font size is stored in localStorage to remember the user's preference. A tooltip is also provided for the font size adjustment controls.\n\n4. **Code Block Interactions**: The code adds features to the code blocks, such as syntax highlighting using the `hljs` library, line numbering, and a copy-to-clipboard button. It also adds anchor links to headings for easy navigation and sharing.\n\n5. **Table of Contents**: The code hides the table of contents on source pages and brings the selected section into view when the page loads or when the URL hash changes.\n\n6. **Mobile Menu**: The code initializes the mobile menu and sets up click event listeners to show or hide the mobile menu.\n\n7. **Miscellaneous**: The code also includes functions for fixing table layouts, adding href attributes to sidebar titles, and initializing tooltips for various UI elements.\n\nExample usage:\n\n```javascript\n// Toggle theme\ntoggleTheme();\n\n// Increment font size\nincrementFont(event);\n\n// Decrement font size\ndecrementFont(event);\n\n// Reset font size\nupdateFontSize(16);\n```",
          "questions": "1. **Question**: What is the purpose of the `toggleTheme` function and how does it work?\n   **Answer**: The `toggleTheme` function is used to switch between the dark and light themes of the webpage. It gets the current theme from the body's `data-theme` attribute, determines the new theme, and then calls the `updateTheme` function to apply the new theme.\n\n2. **Question**: How does the `initAccordion` function work and when is it called?\n   **Answer**: The `initAccordion` function initializes the accordion functionality for the sidebar sections. It is called when the DOM content is loaded. It sets up event listeners for the sidebar section titles and toggles the accordion state based on the stored accordion IDs in the local storage.\n\n3. **Question**: How does the `bringElementIntoView` function work and what is its purpose?\n   **Answer**: The `bringElementIntoView` function is used to scroll the specified element into the viewport. It calculates the offset based on the navbar's height and scrolls the body accordingly. It also has an optional parameter `updateHistory` which, when set to true, updates the browser's history with the element's ID."
        },
        {
          "fileName": "core.min.js",
          "filePath": "sdk/docs/scripts/core.min.js",
          "url": "https://github.com/AleoHQ/aleo/sdk/docs/scripts/core.min.js",
          "summary": "This code is responsible for handling various user interface (UI) functionalities in the Aleo project, such as theme toggling, accordions, font size adjustments, and more. The code is organized into several functions that perform specific tasks, and these functions are called at appropriate times to provide a smooth user experience.\n\n1. **Theme Toggling**: The `toggleTheme` function is responsible for switching between dark and light themes. It updates the `data-theme` attribute of the `body` element and the `xlink:href` attribute of the theme icons. The current theme is stored in the local storage using the `updateTheme` function.\n\n   Example usage: `toggleTheme()`\n\n2. **Accordion**: The `initAccordion` function initializes the accordion functionality in the sidebar. It sets up event listeners for the `.sidebar-section-title` elements and toggles the accordion state using the `toggleAccordion` function. The accordion state is stored in the local storage.\n\n3. **Font Size Adjustment**: The `incrementFont`, `decrementFont`, and `updateFontSize` functions handle font size adjustments. Users can increase or decrease the font size within a specified range (10px to 30px). The current font size is stored in the local storage.\n\n   Example usage: `incrementFont()`, `decrementFont()`\n\n4. **Anchor Links**: The `addAnchor` function adds anchor links to headings (h1, h2, h3, h4) within the main content section. The `createAnchorElement` function creates an anchor element with the appropriate event listener for smooth scrolling.\n\n5. **Table of Contents**: The `bringElementIntoView` function is responsible for smooth scrolling to a specific element in the table of contents. It updates the URL hash and the active element in the table of contents.\n\n6. **Tooltips**: The `initTooltip` function initializes tooltips for various UI elements like theme toggle, search button, font size adjustment, and more using the `tippy` library.\n\n7. **Mobile Menu**: The `initMobileMenu` function sets up the event listener for the mobile menu button. The `onMobileMenuClick` function toggles the mobile menu's visibility.\n\n8. **Miscellaneous**: The code also handles other UI tasks like fixing tables, adding href to sidebar titles, and initializing syntax highlighting using the `hljs` library.\n\nThe code is executed when the DOM is fully loaded, and event listeners are set up for various UI elements. The current theme and font size are retrieved from the local storage and applied to the page.",
          "questions": "1. **Question:** What is the purpose of the `toggleTheme` function and how does it work?\n   **Answer:** The `toggleTheme` function is used to switch between dark and light themes. It checks the current theme by getting the `data-theme` attribute of the document body and updates the theme by calling the `updateTheme` function with the opposite theme (dark or light).\n\n2. **Question:** How does the `initAccordion` function work and what is its purpose?\n   **Answer:** The `initAccordion` function initializes the accordion functionality for the sidebar sections. It first checks if the `accordionLocalStorageKey` exists in the local storage and sets it to an empty object if not. Then, it adds click event listeners to all sidebar section titles, which toggle the accordion state (open or closed) and update the local storage accordingly.\n\n3. **Question:** How is the font size adjusted using the `incrementFont`, `decrementFont`, and `updateFontSize` functions?\n   **Answer:** The `incrementFont` and `decrementFont` functions are used to increase or decrease the font size by 1 unit, respectively, within the defined limits (MIN_FONT_SIZE and MAX_FONT_SIZE). The `updateFontSize` function is called with the new font size value, which updates the font size of the HTML element and stores the new value in the local storage."
        },
        {
          "fileName": "resize.js",
          "filePath": "sdk/docs/scripts/resize.js",
          "url": "https://github.com/AleoHQ/aleo/sdk/docs/scripts/resize.js",
          "summary": "This code is responsible for handling the resizing of a navigation bar (navbar) in a web application. The main purpose of this code is to allow users to adjust the width of the navbar within a specified range and store the user's preference in the browser's local storage for future visits.\n\nThe code starts by defining a global variable `NAVBAR_OPTIONS` and an immediately invoked function expression (IIFE) to encapsulate the logic. Inside the IIFE, it first retrieves the DOM elements for the navbar, footer, and main section of the page. It then checks if there is a saved width value in the local storage under the key `NAVBAR_RESIZE_LOCAL_STORAGE_KEY`. If a value is found, it applies the saved width to the navbar, main section, and footer.\n\nThe `resizeNavbar` function is responsible for resizing the navbar based on the user's input. It takes an event object as an argument and calculates the new width based on the event's `pageX` property. The new width is then checked against the minimum and maximum allowed values (defaulting to 300 and 600, respectively) specified in `NAVBAR_OPTIONS`. If the new width is within the allowed range, it is applied to the navbar, main section, and footer.\n\nThe `setupEventListeners` function adds event listeners for `mousemove` and `touchmove` events to the window, which call the `resizeNavbar` function. The `removeEventListeners` function removes these event listeners and calls `afterRemovingEventListeners`, which saves the current navbar width to local storage.\n\nFinally, the code sets up event listeners for `mousedown` and `touchstart` events on the navbar slider, which call the `setupEventListeners` function, and a `mouseup` event on the window, which calls the `removeEventListeners` function. The `setupResizeOptions` function is provided to allow external code to set the `NAVBAR_OPTIONS` object.\n\nIn the larger project, this code would be used to provide a customizable user interface, allowing users to adjust the width of the navigation bar according to their preferences.",
          "questions": "1. **What is the purpose of the `NAVBAR_OPTIONS` object and how can it be configured?**\n\n   The `NAVBAR_OPTIONS` object is used to store configuration options for the navbar resizing functionality, such as the minimum and maximum allowed width. It can be configured by calling the `setupResizeOptions(options)` function and passing an object with the desired options.\n\n2. **Why is this file marked as `@deprecated` and what are the implications of using deprecated code?**\n\n   The file is marked as `@deprecated` because it may no longer be maintained or supported, and it might be removed in future updates. Using deprecated code can lead to potential issues, such as compatibility problems or lack of support for newer features.\n\n3. **How does the code handle touch events for resizing the navbar on touch-enabled devices?**\n\n   The code handles touch events by adding event listeners for `touchmove` and `touchstart` events, which call the same `resizeNavbar` function as the corresponding mouse events. This allows the resizing functionality to work on touch-enabled devices as well as those using a mouse."
        },
        {
          "fileName": "search.js",
          "filePath": "sdk/docs/scripts/search.js",
          "url": "https://github.com/AleoHQ/aleo/sdk/docs/scripts/search.js",
          "summary": "This code is responsible for implementing a search functionality in the Aleo project. It provides an interactive search experience by fetching data, filtering results based on user input, and displaying the results in a user-friendly manner.\n\nThe main functions in this code are:\n\n1. `showResultText(text)`: Displays the given text in the `resultBox` element.\n2. `hideSearch()`: Hides the search container and removes the event listener for the 'Escape' key.\n3. `listenCloseKey(event)`: Listens for the 'Escape' key press and hides the search container when pressed.\n4. `showSearch()`: Displays the search container, adds the event listener for the 'Escape' key, and focuses on the search input.\n5. `fetchAllData()`: Fetches the search data from the server and returns it as a list.\n6. `onClickSearchItem(event)`: Handles the click event on a search result item and brings the corresponding element into view.\n7. `buildSearchResult(result)`: Builds the HTML output for the search results.\n8. `getSearchResult(list, keys, searchKey)`: Filters the search data based on the given search key and returns the filtered results.\n9. `debounce(func, wait, immediate)`: Debounces the given function to prevent excessive calls.\n10. `search(event)`: Handles the search functionality by fetching data, filtering results, and displaying them in the `resultBox`.\n\nThe code also includes event listeners for DOMContentLoaded and hashchange events. The `onDomContentLoaded()` function initializes the search functionality by adding event listeners to the search button, search container, search wrapper, and search input. The hashchange event listener calls the `showSearch()` function when the window location hash matches the `searchHash`.\n\nHere's an example of how the search functionality works:\n\n1. User clicks on the search button, triggering the `showSearch()` function.\n2. The search container is displayed, and the search input is focused.\n3. User types a query in the search input, triggering the debounced `search()` function.\n4. The search function fetches data, filters results based on the query, and displays the results in the `resultBox`.\n5. User clicks on a search result item, triggering the `onClickSearchItem()` function, which brings the corresponding element into view.\n6. User presses the 'Escape' key or clicks outside the search wrapper, triggering the `hideSearch()` function, which hides the search container.",
          "questions": "1. **Question:** What is the purpose of the `searchId` and `searchHash` constants?\n   **Answer:** The `searchId` constant is a unique identifier for the search feature, and `searchHash` is created by concatenating a hash symbol with the `searchId`. These constants are used to manage the browser's history and hash change events when showing or hiding the search feature.\n\n2. **Question:** How does the `fetchAllData` function work, and what does it return?\n   **Answer:** The `fetchAllData` function fetches search data from a JSON file located at `data/search.json` relative to the base URL. It returns a Promise that resolves to an array of search data items (the `list` property of the fetched JSON object).\n\n3. **Question:** What is the purpose of the `debounce` function, and how is it used in the code?\n   **Answer:** The `debounce` function is a utility function that limits the rate at which a function can be called. It is used in the code to create a debounced version of the `search` function, which is then used as an event listener for the `keyup` event on the `searchInput` element. This ensures that the search function is not called too frequently, improving performance and reducing the number of unnecessary search requests."
        },
        {
          "fileName": "search.min.js",
          "filePath": "sdk/docs/scripts/search.min.js",
          "url": "https://github.com/AleoHQ/aleo/sdk/docs/scripts/search.min.js",
          "summary": "This code is responsible for implementing a search functionality in the Aleo project. It provides an interactive search experience by fetching search data, filtering results based on user input, and displaying the results in a user-friendly manner.\n\nThe main functions in this code are:\n\n1. `showResultText(e)`: Displays the given text `e` in the `resultBox` element.\n2. `hideSearch()`: Hides the search container and removes the event listener for the Escape key.\n3. `showSearch()`: Displays the search container, adds an event listener for the Escape key, and focuses on the search input field.\n4. `fetchAllData()`: Fetches the search data from a JSON file and returns it as an array of objects.\n5. `onClickSearchItem(t)`: Handles the click event on a search result item and brings the corresponding element into view.\n6. `buildSearchResult(e)`: Constructs the HTML for the search results based on the given array of search result objects.\n7. `getSearchResult(e, t, n)`: Filters the search data based on the given query `n` and returns the top 20 results.\n8. `debounce(t, n, a)`: A utility function that limits the rate at which a function can be called.\n9. `search(e)`: The main search function that fetches search data, filters results, and displays them in the `resultBox`.\n\nThe code also includes event listeners for various user interactions, such as clicking on the search button, closing the search container, and typing in the search input field. The search functionality is initialized when the DOM content is loaded, and the search container is shown or hidden based on the URL hash.\n\nExample usage:\n\n- When a user clicks on the search button, the `showSearch()` function is called, which displays the search container and focuses on the search input field.\n- As the user types in the search input field, the `search()` function is called (debounced), which fetches search data, filters results, and displays them in the `resultBox`.\n- When a user clicks on a search result item, the `onClickSearchItem()` function is called, which brings the corresponding element into view.\n- If the user presses the Escape key or clicks outside the search container, the `hideSearch()` function is called, which hides the search container.",
          "questions": "1. **Question:** What is the purpose of the `fetchAllData` function and how does it fetch the data?\n   **Answer:** The `fetchAllData` function is responsible for fetching the search data from the `search.json` file. It constructs the URL for the JSON file using the current location's protocol, hostname, and port, and then fetches the data using the `fetch` function.\n\n2. **Question:** How does the `getSearchResult` function work and what are its parameters?\n   **Answer:** The `getSearchResult` function takes three parameters: an array of data (`e`), an object containing search options (`t`), and a search query string (`n`). It uses the Fuse.js library to create an index and perform a fuzzy search on the data based on the search options and query string. It returns the search results, limited to a maximum of 20 items.\n\n3. **Question:** How is the search functionality debounced and what is the purpose of debouncing in this context?\n   **Answer:** The search functionality is debounced using the `debounce` function, which takes a function (`t`), a delay in milliseconds (`n`), and a boolean flag (`a`). Debouncing is used in this context to limit the frequency of calling the search function while the user is typing in the search input, improving performance and reducing unnecessary calls to the search function."
        }
      ],
      "folders": [
        {
          "folderName": "third-party",
          "folderPath": ".autodoc/docs/json/sdk/docs/scripts/third-party",
          "url": "https://github.com/AleoHQ/aleo/.autodoc/docs/json/sdk/docs/scripts/third-party",
          "files": [
            {
              "fileName": "Apache-License-2.0.txt",
              "filePath": "sdk/docs/scripts/third-party/Apache-License-2.0.txt",
              "url": "https://github.com/AleoHQ/aleo/sdk/docs/scripts/third-party/Apache-License-2.0.txt",
              "summary": "This code file contains the Apache License Version 2.0, which is a widely used open-source software license. The purpose of this license is to define the terms and conditions for using, reproducing, and distributing the software and its source code in the Aleo project. The license ensures that the software can be freely used, modified, and shared, while protecting the rights of the original authors and contributors.\n\nThe license starts by defining key terms such as \"License\", \"Licensor\", \"Legal Entity\", \"You\", \"Source\", \"Object\", \"Work\", \"Derivative Works\", \"Contribution\", and \"Contributor\". These definitions are essential for understanding the scope and applicability of the license.\n\nSections 2 and 3 of the license grant copyright and patent licenses to the users, allowing them to reproduce, prepare derivative works, publicly display, perform, sublicense, and distribute the work in both source and object forms. These licenses are perpetual, worldwide, non-exclusive, royalty-free, and irrevocable, subject to certain conditions.\n\nSection 4 outlines the conditions for redistribution of the work or derivative works, such as providing a copy of the license, stating any changes made, retaining copyright and attribution notices, and including a NOTICE file if applicable.\n\nSection 5 deals with the submission of contributions to the project, stating that any contribution submitted for inclusion in the work shall be under the terms and conditions of the Apache License, unless explicitly stated otherwise.\n\nSection 6 clarifies that the license does not grant permission to use the trademarks, service marks, or product names of the licensor, except as required for reasonable and customary use in describing the origin of the work.\n\nSections 7 and 8 provide disclaimers of warranty and limitations of liability, stating that the work is provided on an \"AS IS\" basis, without any warranties or conditions, and that contributors shall not be liable for any damages arising from the use or inability to use the work.\n\nSection 9 allows users to offer additional support, warranty, indemnity, or other liability obligations while redistributing the work or derivative works, but only on their own behalf and under their sole responsibility.\n\nThe appendix provides instructions on how to apply the Apache License to a user's work, including the boilerplate notice to be attached to the work with the appropriate copyright information.\n\nIn summary, this code file contains the Apache License that governs the use, modification, and distribution of the Aleo project's software and source code, ensuring that it remains open-source and freely available while protecting the rights of the original authors and contributors.",
              "questions": "1. **What is the purpose of this code file?**\n\n   This code file contains the Apache License, Version 2.0, which is a legal document that defines the terms and conditions for using, reproducing, and distributing the software or project it is attached to.\n\n2. **How does this license affect the use and distribution of the project?**\n\n   The Apache License allows users to freely use, modify, and distribute the project, as long as they comply with the terms and conditions specified in the license, such as providing a copy of the license with any distributed works and retaining copyright notices.\n\n3. **What are the warranty and liability limitations under this license?**\n\n   The Apache License provides the work on an \"AS IS\" basis, without any warranties or conditions, and limits the liability of contributors to any damages arising from the use or inability to use the work. However, users may choose to offer and charge a fee for additional support, warranty, indemnity, or other liability obligations, acting on their own behalf and sole responsibility."
            },
            {
              "fileName": "fuse.js",
              "filePath": "sdk/docs/scripts/third-party/fuse.js",
              "url": "https://github.com/AleoHQ/aleo/sdk/docs/scripts/third-party/fuse.js",
              "summary": "The code is an implementation of Fuse.js, a lightweight fuzzy-search library that provides a simple way to search for approximate matches of a pattern within a collection of strings or objects. It is particularly useful for searching through large datasets, where exact matches may not always be possible or practical.\n\nThe library exposes a `Fuse` constructor that accepts a collection of data and an options object. The options object allows users to customize various aspects of the search, such as case sensitivity, scoring, and tokenization. The main functionality of the library is provided by the `search` method, which takes a search query and returns an array of results sorted by relevance.\n\nThe code is organized into several classes and functions that handle different aspects of the search process:\n\n- `E`: Represents an index of the data collection, which is used to speed up searches. It provides methods for adding and removing items, as well as searching for matches.\n- `N`: Represents a search pattern and provides methods for searching within a string or an object.\n- `D`: A base class for search strategies, which are used to search for matches using different algorithms. Several subclasses are provided, such as `K` (exact match), `B` (include match), `W` (prefix-exact match), and `V` (fuzzy match).\n- `X`: A function that parses a search query and returns an array of search strategies.\n- `Z`: A search strategy that uses extended search syntax, allowing users to combine multiple search strategies in a single query.\n\nHere's an example of how to use the library:\n\n```javascript\nconst data = ['apple', 'banana', 'cherry'];\nconst options = { includeScore: true, threshold: 0.4 };\nconst fuse = new Fuse(data, options);\n\nconst results = fuse.search('aple');\n// Results: [{ item: 'apple', refIndex: 0, score: 0.25 }]\n```\n\nIn this example, we create a new `Fuse` instance with a collection of fruit names and a custom threshold for fuzzy matching. We then search for the string 'aple', which returns a single result with a score indicating the relevance of the match.",
              "questions": "1. **What is the purpose of this code?**\n\n   This code is for Fuse.js v6.4.6, a lightweight fuzzy-search library. It provides functionality for searching and matching text with a fuzzy matching algorithm, allowing for approximate string matching.\n\n2. **What are the main features of this library?**\n\n   The main features of this library include:\n   - Fuzzy searching with customizable options such as case sensitivity, threshold, and distance.\n   - Support for searching in both strings and objects.\n   - Ability to include matches and scores in the search results.\n   - Customizable sorting of search results.\n   - Extended search capabilities with logical operators.\n\n3. **How can a developer customize the search options?**\n\n   A developer can customize the search options by passing an options object when creating a new Fuse instance. Some of the available options include `isCaseSensitive`, `includeMatches`, `minMatchCharLength`, `ignoreLocation`, `findAllMatches`, `location`, `threshold`, and `distance`."
            },
            {
              "fileName": "hljs-line-num-original.js",
              "filePath": "sdk/docs/scripts/third-party/hljs-line-num-original.js",
              "url": "https://github.com/AleoHQ/aleo/sdk/docs/scripts/third-party/hljs-line-num-original.js",
              "summary": "This code is a part of the `aleo` project and provides line numbering functionality for code blocks highlighted using the `highlight.js` library. It adds line numbers to the code blocks and ensures consistent copy/paste behavior across all browsers.\n\nThe code starts by checking if `highlight.js` is available and then adds the necessary functions to the `hljs` object. It also adds the required CSS styles for line numbering.\n\nThe `initLineNumbersOnLoad` function initializes line numbering for all code blocks on the page when the document is ready. It processes each code block and adds line numbers if the plugin is not disabled for that block.\n\nThe `lineNumbersBlock` and `lineNumbersValue` functions are used to add line numbers to a given code block element or a string value, respectively. They both internally call the `lineNumbersInternal` function, which processes the code block, duplicates multiline nodes if necessary, and adds line numbers using the `addLineNumbersBlockFor` function.\n\nThe `addLineNumbersBlockFor` function generates an HTML table with line numbers and code lines as table rows. It also handles the options for starting line numbers and displaying line numbers for single-line code blocks.\n\nThe code also includes helper functions for handling options, duplicating multiline nodes, and getting line count. Additionally, it has a `copy` event listener to ensure consistent copy/paste behavior across all browsers, including a workaround for Microsoft Edge.\n\nHere's an example of how to use this code in an HTML file:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <link rel=\"stylesheet\" href=\"path/to/highlight.js/styles/default.css\">\n  <script src=\"path/to/highlight.js\"></script>\n  <script src=\"path/to/this-file.js\"></script>\n  <script>hljs.initHighlightingOnLoad(); hljs.initLineNumbersOnLoad();</script>\n</head>\n<body>\n  <pre><code class=\"hljs\" data-ln-start-from=\"10\">Your code here</code></pre>\n</body>\n</html>\n```\n\nThis will initialize the `highlight.js` library and the line numbering plugin, adding line numbers to the code block starting from line 10.",
              "questions": "1. **What is the purpose of this code?**\n\n   This code is a plugin for the highlight.js library that adds line numbers to the highlighted code blocks. It handles various edge cases and ensures consistent copy/paste behavior across all browsers.\n\n2. **How does the plugin handle line numbering for multiline elements in the code block?**\n\n   The plugin uses the `duplicateMultilineNodes` function to perform a deep traversal of child nodes and calls the `duplicateMultilineNode` function on each node to fix multi-line elements implementation in highlight.js. It wraps each line in a `<span>` element with the same class as the original element and adds a line break after each line.\n\n3. **How can I disable the plugin for a specific code block?**\n\n   To disable the plugin for a specific code block, add the `nohljsln` class to the code block element. The `isPluginDisabledForBlock` function checks if the element has this class and skips line numbering for that block if the class is present."
            },
            {
              "fileName": "hljs-line-num.js",
              "filePath": "sdk/docs/scripts/third-party/hljs-line-num.js",
              "url": "https://github.com/AleoHQ/aleo/sdk/docs/scripts/third-party/hljs-line-num.js",
              "summary": "This code is a part of the Aleo project and provides line numbering functionality for code blocks that are highlighted using the `highlight.js` library. The code is written as an Immediately Invoked Function Expression (IIFE) to avoid polluting the global namespace.\n\nThe main purpose of this code is to add line numbers to code blocks that are highlighted using `highlight.js`. It does this by modifying the HTML structure of the code blocks and adding additional elements for line numbers. The code also handles the copy event to ensure that the line numbers are not copied when a user selects and copies the code.\n\nThe code provides the following functions:\n\n1. `hljs.initLineNumbersOnLoad(options)`: Initializes the line numbering functionality on page load. It takes an optional `options` object as a parameter.\n2. `hljs.lineNumbersBlock(element, options)`: Adds line numbers to a specific code block. It takes an `element` and an optional `options` object as parameters.\n3. `hljs.lineNumbersValue(value, options)`: Returns the HTML string with line numbers for a given code string. It takes a `value` and an optional `options` object as parameters.\n\nExample usage:\n\n```javascript\n// Initialize line numbering on page load\nhljs.initLineNumbersOnLoad();\n\n// Add line numbers to a specific code block\nvar codeBlock = document.querySelector(\"code.hljs\");\nhljs.lineNumbersBlock(codeBlock);\n\n// Get the HTML string with line numbers for a given code string\nvar codeString = \"function hello() {\\n  console.log('Hello, world!');\\n}\";\nvar numberedCode = hljs.lineNumbersValue(codeString);\n```\n\nThe code also includes utility functions for string manipulation, splitting text by line, and counting the number of lines in a string. Additionally, it handles the copy event to ensure that the line numbers are not copied when a user selects and copies the code.",
              "questions": "1. **Question**: What is the purpose of this code?\n   **Answer**: This code is a minified JavaScript file that appears to be related to adding line numbers to code blocks formatted with the `highlight.js` library.\n\n2. **Question**: How does this code integrate with `highlight.js`?\n   **Answer**: This code extends the `highlight.js` library by adding functions like `initLineNumbersOnLoad`, `lineNumbersBlock`, and `lineNumbersValue` to the `hljs` object.\n\n3. **Question**: How can I customize the line numbering behavior?\n   **Answer**: You can customize the line numbering behavior by passing an options object to the `initLineNumbersOnLoad` function, which can include properties like `singleLine` and `startFrom`."
            },
            {
              "fileName": "popper.js",
              "filePath": "sdk/docs/scripts/third-party/popper.js",
              "url": "https://github.com/AleoHQ/aleo/sdk/docs/scripts/third-party/popper.js",
              "summary": "The code provided is a minified version of the Popper.js library (v2.11.5), which is a positioning engine for tooltips, popovers, and other floating elements. It is designed to calculate the position of an element (the \"popper\") relative to another element (the \"reference\") while considering various constraints, such as viewport boundaries, scrollable containers, and user-defined offsets.\n\nThe library exposes a `createPopper` function that takes two elements (reference and popper) and an optional configuration object as arguments. It returns an instance with methods like `update`, `forceUpdate`, and `destroy` to manage the popper's position.\n\n```javascript\nimport { createPopper } from '@popperjs/core';\n\nconst referenceElement = document.querySelector('#reference');\nconst popperElement = document.querySelector('#popper');\n\nconst popperInstance = createPopper(referenceElement, popperElement, {\n  placement: 'right',\n  modifiers: [\n    {\n      name: 'offset',\n      options: {\n        offset: [0, 8],\n      },\n    },\n  ],\n});\n```\n\nThe library also provides a lighter version called `createPopperLite`, which includes only the essential modifiers for basic positioning.\n\nThe code includes various utility functions for handling DOM elements, such as `f` for getting the dimensions and position of an element, `c` for getting the scroll position of an element, and `m` for calculating the position of an element relative to another element.\n\nIt also defines several modifiers that can be used to customize the behavior of the popper, such as `flip`, `preventOverflow`, `arrow`, and `hide`. These modifiers can be added to the configuration object when creating a popper instance.\n\nIn summary, this code is a positioning library that helps developers create and manage the position of floating elements like tooltips and popovers relative to other elements while considering various constraints.",
              "questions": "1. **Question**: What is the purpose of this code?\n   **Answer**: This code is the implementation of the Popper.js library (v2.11.5), which is a positioning engine used to manage elements like tooltips, popovers, and dropdowns in web applications. It helps in calculating the position of an element relative to another element, handling various edge cases, and providing a flexible and extensible API.\n\n2. **Question**: What are the main functions provided by this library?\n   **Answer**: The main functions provided by this library include `createPopper`, `createPopperLite`, `popperGenerator`, and various modifiers like `applyStyles`, `arrow`, `computeStyles`, `eventListeners`, `flip`, `hide`, `offset`, and `preventOverflow`. These functions and modifiers help in creating and managing the position of elements in a web application.\n\n3. **Question**: How can a developer use this library in their project?\n   **Answer**: A developer can use this library by importing it into their project and then using the provided functions and modifiers to create and manage the position of elements. For example, they can use the `createPopper` function to create a new Popper instance for a tooltip element and its reference element, and then use the various modifiers to customize the positioning behavior as needed."
            },
            {
              "fileName": "tippy.js",
              "filePath": "sdk/docs/scripts/third-party/tippy.js",
              "url": "https://github.com/AleoHQ/aleo/sdk/docs/scripts/third-party/tippy.js",
              "summary": "The code provided is a minified version of the Tippy.js library, which is a highly customizable tooltip and popover library. Tippy.js is used to create tooltips, popovers, and other similar UI elements that appear when users interact with elements on a webpage. The library is built on top of the Popper.js library, which is used for positioning the tooltips and popovers.\n\nThe Tippy.js library provides a simple API for creating tooltips and popovers with various options for customization. Some of the key features of the library include:\n\n- Customizable content: The content of the tooltip or popover can be plain text, HTML, or even a DOM element.\n- Customizable appearance: The library provides options for changing the appearance of the tooltip or popover, such as the background color, font size, and border radius.\n- Customizable animations: The library supports various animations for showing and hiding the tooltip or popover, such as fade, scale, and shift.\n- Event handling: The library provides options for controlling when the tooltip or popover should be shown or hidden, based on user interactions such as mouseenter, focus, and click events.\n- Accessibility: The library ensures that the tooltips and popovers are accessible to screen readers and keyboard users.\n\nHere's",
              "questions": "1. **What is the purpose of this code?**\n\n   This code is for a library called Tippy.js, which is a highly customizable tooltip and popover library. It provides functionality for creating tooltips and popovers with various options, such as animations, themes, and interactivity.\n\n2. **How does this code handle different input types and events?**\n\n   The code handles different input types and events by using event listeners and checking the type of the event. For example, it checks if the event is a touch event or a mouse event and handles them accordingly. It also checks for specific event types like \"mouseenter\", \"mouseleave\", \"focus\", and \"blur\" to trigger the tooltip or popover.\n\n3. **How does this code handle customizations and plugins?**\n\n   The code allows for customizations through the use of default properties and user-defined properties. It also supports plugins by providing a `plugins` array in the default properties, which can be extended with user-defined plugins. The plugins can have their own properties and methods, which can be used to extend or modify the functionality of the library."
            },
            {
              "fileName": "tocbot.min.js",
              "filePath": "sdk/docs/scripts/third-party/tocbot.min.js",
              "url": "https://github.com/AleoHQ/aleo/sdk/docs/scripts/third-party/tocbot.min.js",
              "summary": "This code is part of the `aleo` project and provides functionality for generating a table of contents (TOC) based on the headings present in a given HTML content. The TOC is generated as a nested list of links, allowing users to easily navigate through the content by clicking on the desired heading.\n\nThe code consists of three main parts:\n\n1. `ParseContent`: This function is responsible for parsing the HTML content and extracting the headings. It takes into account various options such as ignoring certain selectors, including HTML content, and handling hidden elements. The extracted headings are then organized into a nested array based on their heading levels.\n\n   Example usage:\n\n   ```javascript\n   var parsedContent = ParseContent(options);\n   var headingsArray = parsedContent.nestHeadingsArray(headings);\n   ```\n\n2. `BuildHtml`: This function is responsible for generating the TOC HTML structure based on the nested headings array. It creates a nested list of links with appropriate classes and attributes, such as active link and collapsible list classes. It also provides methods for updating the TOC when the user scrolls through the content.\n\n   Example usage:\n\n   ```javascript\n   var htmlBuilder = BuildHtml(options);\n   var tocElement = htmlBuilder.render(tocContainer, headingsArray);\n   ```\n\n3. `tocbot`: This is the main object that exposes the public API for initializing, refreshing, and destroying the TOC functionality. It combines the functionality of `ParseContent` and `BuildHtml` to generate the TOC and attach the necessary event listeners for updating the TOC as the user scrolls through the content.\n\n   Example usage:\n\n   ```javascript\n   tocbot.init({\n     tocSelector: '.js-toc',\n     contentSelector: '.js-content',\n     headingSelector: 'h1, h2, h3',\n   });\n   ```\n\nIn the larger project, this code can be used to automatically generate a table of contents for any HTML content with headings, making it easier for users to navigate through the content and improving the overall user experience.",
              "questions": "1. **Question**: What is the purpose of the `defaultOptions` object and what are the available options?\n   **Answer**: The `defaultOptions` object contains the default configuration options for the tocbot library. These options include settings for selectors, classes, scroll behavior, and rendering options, among others.\n\n2. **Question**: How does the `ParseContent` function work and what does it return?\n   **Answer**: The `ParseContent` function takes a configuration object as an argument and returns an object with two methods: `nestHeadingsArray` and `selectHeadings`. These methods are used to parse the content of the page, select the headings based on the provided configuration, and nest them in a hierarchical structure.\n\n3. **Question**: How can a developer customize the behavior of the tocbot library, such as changing the scroll duration or using a different selector for headings?\n   **Answer**: A developer can customize the behavior of the tocbot library by passing a configuration object with the desired options when calling `tocbot.init()`. For example, to change the scroll duration, they can pass an object with the `scrollSmoothDuration` property set to the desired value. Similarly, to use a different selector for headings, they can pass an object with the `headingSelector` property set to the desired selector."
            }
          ],
          "folders": [],
          "summary": "The `.autodoc/docs/json/sdk/docs/scripts/third-party` folder contains various third-party libraries and scripts that are used in the Aleo project to provide additional functionality and improve the user experience. These libraries and scripts include:\n\n1. **Apache-License-2.0.txt**: This file contains the Apache License Version 2.0, which governs the use, modification, and distribution of the Aleo project's software and source code, ensuring that it remains open-source and freely available while protecting the rights of the original authors and contributors.\n\n2. **fuse.js**: A lightweight fuzzy-search library that allows searching for approximate matches of a pattern within a collection of strings or objects. It can be used in the Aleo project to search through large datasets where exact matches may not always be possible or practical. Example usage:\n\n   ```javascript\n   const data = ['apple', 'banana', 'cherry'];\n   const options = { includeScore: true, threshold: 0.4 };\n   const fuse = new Fuse(data, options);\n\n   const results = fuse.search('aple');\n   // Results: [{ item: 'apple', refIndex: 0, score: 0.25 }]\n   ```\n\n3. **hljs-line-num-original.js** and **hljs-line-num.js**: These scripts provide line numbering functionality for code blocks highlighted using the `highlight.js` library. They add line numbers to the code blocks and ensure consistent copy/paste behavior across all browsers. Example usage:\n\n   ```html\n   <!DOCTYPE html>\n   <html>\n   <head>\n     <link rel=\"stylesheet\" href=\"path/to/highlight.js/styles/default.css\">\n     <script src=\"path/to/highlight.js\"></script>\n     <script src=\"path/to/this-file.js\"></script>\n     <script>hljs.initHighlightingOnLoad(); hljs.initLineNumbersOnLoad();</script>\n   </head>\n   <body>\n     <pre><code class=\"hljs\" data-ln-start-from=\"10\">Your code here</code></pre>\n   </body>\n   </html>\n   ```\n\n4. **popper.js**: A positioning library for tooltips, popovers, and other floating elements. It calculates the position of an element relative to another element while considering various constraints, such as viewport boundaries, scrollable containers, and user-defined offsets. This library can be used in the Aleo project to create and manage the position of floating UI elements.\n\n5. **tippy.js**: A highly customizable tooltip and popover library built on top of Popper.js. It can be used in the Aleo project to create tooltips, popovers, and other similar UI elements that appear when users interact with elements on a webpage.\n\n6. **tocbot.min.js**: A script that generates a table of contents (TOC) based on the headings present in a given HTML content. The TOC is generated as a nested list of links, allowing users to easily navigate through the content by clicking on the desired heading. This script can be used in the Aleo project to automatically generate a table of contents for any HTML content with headings, improving the overall user experience. Example usage:\n\n   ```javascript\n   tocbot.init({\n     tocSelector: '.js-toc',\n     contentSelector: '.js-content',\n     headingSelector: 'h1, h2, h3',\n   });\n   ```\n\nThese third-party libraries and scripts enhance the functionality of the Aleo project by providing additional features such as fuzzy search, line numbering for code blocks, tooltips and popovers, and table of contents generation. They can be integrated into the project to improve the user experience and make it easier for developers to work with the project.",
          "questions": ""
        }
      ],
      "summary": "The `.autodoc/docs/json/sdk/docs/scripts` folder contains various JavaScript files responsible for handling user interface (UI) functionalities and interactions in the Aleo project's documentation website. These functionalities include theme toggling, accordion behavior, font size adjustment, code block interactions, search functionality, and more.\n\nFor example, the `core.js` file handles UI features such as theme toggling, accordion behavior, font size adjustment, and code block interactions. The `toggleTheme` function can be used to switch between dark and light themes:\n\n```javascript\n// Toggle theme\ntoggleTheme();\n```\n\nThe `resize.js` file is responsible for handling the resizing of a navigation bar (navbar) in the web application, allowing users to adjust the width of the navbar within a specified range and store their preference in the browser's local storage.\n\nThe `search.js` file implements a search functionality in the Aleo project, providing an interactive search experience by fetching data, filtering results based on user input, and displaying the results in a user-friendly manner. The search functionality can be triggered by calling the `showSearch()` function:\n\n```javascript\n// Show search container\nshowSearch();\n```\n\nThe `third-party` subfolder contains various third-party libraries and scripts that are used in the Aleo project to provide additional functionality and improve the user experience. These libraries and scripts include `fuse.js` for fuzzy search, `hljs-line-num-original.js` and `hljs-line-num.js` for line numbering in code blocks, `popper.js` for positioning tooltips and popovers, `tippy.js` for creating tooltips and popovers, and `tocbot.min.js` for generating a table of contents based on the headings present in a given HTML content.\n\nThese JavaScript files and third-party libraries enhance the functionality of the Aleo project by providing additional features and improving the user experience. They can be integrated into the project to make it easier for developers to work with the project and provide a smooth user experience for the documentation website.",
      "questions": ""
    },
    {
      "folderName": "styles",
      "folderPath": ".autodoc/docs/json/sdk/docs/styles",
      "url": "https://github.com/AleoHQ/aleo/.autodoc/docs/json/sdk/docs/styles",
      "files": [
        {
          "fileName": "clean-jsdoc-theme-base.css",
          "filePath": "sdk/docs/styles/clean-jsdoc-theme-base.css",
          "url": "https://github.com/AleoHQ/aleo/sdk/docs/styles/clean-jsdoc-theme-base.css",
          "summary": "This code is a CSS (Cascading Style Sheets) file that defines the styling and layout for the Aleo project's web pages. It is responsible for the visual appearance of the project, including typography, colors, layout, and responsive design for different screen sizes.\n\nThe code starts by defining custom font faces for headings, body text, and code snippets using the `@font-face` rule. It then sets some global styles, such as box-sizing, margin, padding, and font properties for various HTML elements like headings, paragraphs, lists, and links.\n\nThe code also includes styles for specific components and sections of the web pages, such as badges, blockquotes, tables, and code blocks. For example, it defines the appearance of tables with proper spacing, border-radius, and sticky headers. It also styles code blocks with syntax highlighting, line numbers, and a copy-to-clipboard button.\n\nThe layout of the web pages is designed using Flexbox, with a fixed sidebar on the left, a top navigation bar, and a main content area that adjusts its padding based on the screen size. The code also includes styles for a table of contents (TOC) on the right side of the screen, which is hidden on smaller screens.\n\nThe CSS file also includes styles for a search functionality, with a fixed search container, input box, and search results. Additionally, it provides styles for a mobile menu icon and a mobile sidebar, which are only displayed on smaller screens.\n\nIn summary, this CSS file is responsible for the overall look and feel of the Aleo project's web pages, ensuring a consistent and responsive design across different devices and screen sizes.",
          "questions": "1. **Question**: What are the custom font faces being used in this project and where are they being loaded from?\n   **Answer**: There are three custom font faces being used in this project: 'heading', 'body', and 'code'. They are being loaded from the '../fonts/' directory with the respective font files: 'WorkSans-Bold.ttf', 'OpenSans-Regular.ttf', and 'Inconsolata-Regular.ttf'.\n\n2. **Question**: How are the styles for different heading levels (h1, h2, h3, h4, h5, h6) defined in this code?\n   **Answer**: The styles for different heading levels are defined by setting the 'font-family' to 'heading', 'font-weight' to 'normal', and 'line-height' to 1.75. Each heading level also has a specific 'font-size' and some have a 'margin' defined.\n\n3. **Question**: How are the styles for the sidebar and table of contents (toc) being handled in this code for different screen sizes?\n   **Answer**: The styles for the sidebar and table of contents are being handled using media queries. For screens with a width of 100em or less, the 'toc-container' is hidden, and the 'main-content' padding is adjusted. For screens with a width between 65em and 100em, the 'mobile-sidebar-container' is hidden, and the 'navbar-container' is adjusted. For screens with a width of 65em or less, the 'sidebar-container' is hidden, and the 'main-content', 'navbar-container', and 'footer' are adjusted accordingly."
        },
        {
          "fileName": "clean-jsdoc-theme-dark.css",
          "filePath": "sdk/docs/styles/clean-jsdoc-theme-dark.css",
          "url": "https://github.com/AleoHQ/aleo/sdk/docs/styles/clean-jsdoc-theme-dark.css",
          "summary": "This code is a CSS (Cascading Style Sheets) file that defines the styling and appearance of various HTML elements in the Aleo project. The purpose of this code is to provide a consistent and visually appealing design across the entire project.\n\nThe CSS file covers a wide range of elements, including text, links, headings, sidebars, navigation bars, footers, tables, code blocks, blockquotes, and search components. It also includes styling for syntax highlighting in code blocks using the `hljs` (highlight.js) library.\n\nFor example, the `body` element has a dark background color (`#1a1a1a`) and white text color (`#fff`). Links (`a` elements) have a blue color (`#00bbff`) and change to a darker blue when active. Headings (`h1` to `h6`) have a white color.\n\nThe sidebar has a dark background color (`#222`) and a lighter text color (`#999`). When hovering over a sidebar section title, the background color changes to `#252525`. The navigation bar has a similar dark background color (`#1a1a1a`) and lighter text/icons color (`#999`). When hovering over a navigation item, the background color changes to `#202020`.\n\nCode blocks have a dark background color (`#333`) and use various colors for syntax highlighting, such as `#ff7b72` for keywords and `#30ac7c` for template variables.\n\nThe CSS file also includes styling for scrollbars, with a dark track color (`#333`) and a slightly lighter thumb color (`#555`).\n\nOverall, this CSS file contributes to the Aleo project by providing a visually appealing and consistent design for various elements, making it easier for users to navigate and interact with the project.",
          "questions": "1. **Question:** What is the purpose of the `::selection` CSS rule in this code?\n   **Answer:** The `::selection` CSS rule is used to style the text that is selected by the user. In this case, it sets the background color to `#ffce76` and the text color to `#222` when the text is selected.\n\n2. **Question:** How does this code handle styling for different heading levels (h1, h2, h3, etc.)?\n   **Answer:** This code applies the same styling to all heading levels (h1, h2, h3, h4, h5, and h6) by setting their text color to `#fff` (white).\n\n3. **Question:** How does this code style the scrollbar?\n   **Answer:** This code styles the scrollbar using the `::-webkit-scrollbar-track` and `::-webkit-scrollbar-thumb` pseudo-elements. The scrollbar track has a background color of `#333`, while the scrollbar thumb has a background color of `#555` and an outline of `0.06125rem` solid `#555`."
        },
        {
          "fileName": "clean-jsdoc-theme-light.css",
          "filePath": "sdk/docs/styles/clean-jsdoc-theme-light.css",
          "url": "https://github.com/AleoHQ/aleo/sdk/docs/styles/clean-jsdoc-theme-light.css",
          "summary": "This code is a CSS (Cascading Style Sheets) file that defines the styling for the \"light\" theme of the Aleo project. The purpose of this code is to provide a visually appealing and consistent appearance for the user interface elements, such as text, links, buttons, and backgrounds, when the light theme is selected.\n\nThe code is organized into sections, each targeting specific elements or groups of elements in the project. For example, the `.light a, .light a:active` section defines the color of links and active links in the light theme. Similarly, the `.light .sidebar` section sets the background color and text color for the sidebar.\n\nSome sections target more specific elements, such as headings (`.light h1, .light h2, ...`), tables (`.light table td, .light .params td`), and code blocks (`.light .hljs-comment, .light .hljs-quote`). These sections ensure that the appearance of these elements is consistent with the overall light theme.\n\nThe code also includes styling for interactive elements, such as buttons and tooltips. For example, the `.light .icon-button:hover` section defines the background color when a user hovers over an icon button. The `.light .tooltip` section sets the background and text color for tooltips.\n\nIn the larger project, this CSS file would be applied when the user selects the light theme, providing a cohesive and visually appealing appearance for the user interface. The code ensures that all elements, from text and links to buttons and tooltips, are styled consistently and in line with the chosen theme.",
          "questions": "1. **Question**: What is the purpose of the `.light` class and its related styles in this code?\n   **Answer**: The `.light` class and its related styles are used to define the appearance of various elements in the light theme of the Aleo project. This includes setting background colors, text colors, and other styling properties for different elements like headers, links, tables, and code blocks.\n\n2. **Question**: How are the colors for syntax highlighting in code blocks defined in the `.light` theme?\n   **Answer**: The colors for syntax highlighting in code blocks are defined using the `.light .hljs-*` classes, where `*` represents different code elements like comments, keywords, strings, etc. Each class sets the `color` property to a specific color value for that element in the light theme.\n\n3. **Question**: How does the `.light` theme handle styling for tooltips and scrollbars?\n   **Answer**: The `.light` theme styles tooltips using the `.light .tooltip` class, which sets the background color and text color for tooltips. For scrollbars, the `.light ::-webkit-scrollbar-track` and `.light ::-webkit-scrollbar-thumb` classes are used to style the scrollbar track and thumb, respectively, with specific background colors and outlines."
        },
        {
          "fileName": "clean-jsdoc-theme.min.css",
          "filePath": "sdk/docs/styles/clean-jsdoc-theme.min.css",
          "url": "https://github.com/AleoHQ/aleo/sdk/docs/styles/clean-jsdoc-theme.min.css",
          "summary": "This code is a CSS (Cascading Style Sheets) file that defines the styling and layout for the Aleo project's user interface. It is responsible for the visual appearance of the project, including typography, colors, layout, and responsive design for different screen sizes.\n\nThe code starts by defining custom font faces for headings, body text, and code elements using the `@font-face` rule. It then sets global styles, such as box-sizing, margin, and padding for all elements. The `html` and `body` elements are styled with a minimum height, width, and line-height.\n\nTypography styles are defined for headings (h1 to h6), paragraphs, lists, and other text elements. The code also includes styles for images, links, and blockquotes. Specific classes are used to style elements like tables, code blocks, and tooltips.\n\nThe layout of the user interface is designed using Flexbox, with a sidebar, table of contents, and main content area. The code includes responsive design using media queries to adapt the layout for different screen sizes. For example, the table of contents is hidden on smaller screens, and the sidebar is replaced with a mobile menu.\n\nThe code also includes styles for a search feature, including a search input field, search results, and a close button. The search feature is designed to be fixed on the screen and overlay the main content.\n\nIn summary, this CSS file is responsible for the visual appearance and layout of the Aleo project's user interface, ensuring a consistent and responsive design across different devices and screen sizes.",
          "questions": "1. **What are the custom font faces used in this code?**\n\n   The custom font faces used in this code are \"heading\" (WorkSans-Bold.ttf), \"body\" (OpenSans-Regular.ttf), and \"code\" (Inconsolata-Regular.ttf).\n\n2. **How are the different font sizes for headings (h1, h2, h3, h4, h5, h6) defined in this code?**\n\n   The font sizes for headings are defined as follows: h1 (3.5rem), h2 (2.25rem), h3 (1.5rem), h4 (1.25rem), h5 (1rem), and h6 (1rem).\n\n3. **How are the styles for the scrollbar defined in this code?**\n\n   The styles for the scrollbar are defined using the `::-webkit-scrollbar`, `::-webkit-scrollbar-track`, and `::-webkit-scrollbar-thumb` pseudo-elements. The scrollbar width and height are set to 0.3125rem, the track background is set to #333 (dark mode) or #ddd (light mode), and the thumb background is set to #555 (dark mode) or #aaa (light mode) with an outline of the same color."
        }
      ],
      "folders": [],
      "summary": "The `.autodoc/docs/json/sdk/docs/styles` folder contains CSS files that define the styling and layout for the Aleo project's user interface. These files ensure a consistent and visually appealing appearance across the entire project, including typography, colors, layout, and responsive design for different screen sizes.\n\nThe `clean-jsdoc-theme-base.css` file sets the foundation for the project's web pages, defining custom font faces, global styles, and specific components such as badges, blockquotes, tables, and code blocks. The layout is designed using Flexbox, with a fixed sidebar, top navigation bar, and main content area. The file also includes styles for a search functionality and a mobile menu.\n\nFor example, to style a table with proper spacing and border-radius, the following code is used:\n\n```css\ntable {\n  border-collapse: separate;\n  border-spacing: 0;\n  border-radius: 4px;\n  overflow: hidden;\n}\n```\n\nThe `clean-jsdoc-theme-dark.css` and `clean-jsdoc-theme-light.css` files define the styling for the dark and light themes, respectively. These files cover a wide range of elements, including text, links, headings, sidebars, navigation bars, footers, tables, code blocks, and search components. They also include styling for syntax highlighting in code blocks using the `hljs` (highlight.js) library.\n\nFor example, to style the body element with a dark background color and white text color in the dark theme, the following code is used:\n\n```css\n.light body {\n  background-color: #1a1a1a;\n  color: #fff;\n}\n```\n\nThe `clean-jsdoc-theme.min.css` file is a minified version of the base CSS file, providing the same styling and layout but with a smaller file size for faster loading times.\n\nIn the larger project, these CSS files work together to provide a cohesive and visually appealing appearance for the user interface. The base CSS file sets the foundation, while the dark and light theme files customize the appearance based on the user's preference. The minified version of the base CSS file ensures faster loading times for the project's web pages.\n\nDevelopers working with the Aleo project can use these CSS files to style their components and ensure a consistent appearance across the entire project. They can also customize the dark and light themes by modifying the respective CSS files, or create new themes by following the same structure.",
      "questions": ""
    }
  ],
  "summary": "The `.autodoc/docs/json/sdk/docs` folder contains documentation and code for the Aleo project, which provides high-level utilities in JavaScript for handling Accounts, Records, and Node connections in the browser. The project is organized into three main classes: `Account`, `AleoNetworkClient`, and `DevelopmentClient`.\n\nThe `Account` class offers methods for managing accounts, such as creating an account from a private key ciphertext, encrypting and decrypting records, checking if an account owns a ciphertext record, and signing and verifying messages with the account's private key. For example, to create an account from a private key ciphertext, you can use the following code:\n\n```javascript\nconst account = Account.fromCiphertext(privateKeyCiphertext);\n```\n\nThe `AleoNetworkClient` class is responsible for interacting with the Aleo blockchain. It provides methods for finding unspent records, getting account information, retrieving blocks and block ranges, fetching the latest block, hash, and height, and querying transactions and programs. For instance, to get the latest block, you can use the following code:\n\n```javascript\nconst aleoClient = new AleoNetworkClient();\nconst latestBlock = await aleoClient.getLatestBlock();\n```\n\nThe `DevelopmentClient` class is designed for deploying and executing programs on the Aleo network using an Aleo Development Server. It provides methods for deploying a program (`deployProgram`), executing a program (`executeProgram`), and transferring credits between accounts (`transfer`). Note that an Aleo Development Server must be running locally or remotely for these methods to work. Here's an example of how to use the `DevelopmentClient` class to deploy a program:\n\n```javascript\nconst devClient = new DevelopmentClient();\ndevClient.deployProgram(programSourceCode);\n```\n\nThe folder also contains various JavaScript files responsible for handling user interface (UI) functionalities and interactions in the Aleo project's documentation website, such as theme toggling, accordion behavior, font size adjustment, code block interactions, search functionality, and more.\n\nThe CSS files in the `styles` folder define the styling and layout for the Aleo project's user interface, ensuring a consistent and visually appealing appearance across the entire project, including typography, colors, layout, and responsive design for different screen sizes.\n\nIn summary, the `.autodoc/docs/json/sdk/docs` folder provides a set of functionalities that enable developers to manage accounts, interact with the Aleo blockchain, and deploy and execute programs on the Aleo network. These tools are essential for building and testing applications on the Aleo platform, and they work together with other parts of the project to provide a seamless development experience.",
  "questions": ""
}
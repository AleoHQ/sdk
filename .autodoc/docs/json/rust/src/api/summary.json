{
  "folderName": "api",
  "folderPath": ".autodoc/docs/json/rust/src/api",
  "url": "https://github.com/AleoHQ/aleo/.autodoc/docs/json/rust/src/api",
  "files": [
    {
      "fileName": "blocking.rs",
      "filePath": "rust/src/api/blocking.rs",
      "url": "https://github.com/AleoHQ/aleo/rust/src/api/blocking.rs",
      "summary": "This code defines an `AleoAPIClient` for interacting with the Aleo blockchain. The client provides methods to query the blockchain for information such as the latest block height, hash, and block data. It also allows users to retrieve specific blocks, transactions, and programs by their respective identifiers.\n\nFor example, the `latest_height` method returns the height of the latest block in the blockchain. Similarly, the `latest_hash` and `latest_block` methods return the hash and the block data of the latest block, respectively.\n\nThe `get_block` and `get_blocks` methods allow users to retrieve a single block or a range of blocks by specifying their heights. The `get_transaction` method retrieves a transaction by its ID, while the `get_memory_pool_transactions` method returns all transactions currently in the memory pool.\n\nThe `get_program` method retrieves a program by its ID, and the `find_block_hash` method finds the block hash containing a specific transaction ID. The `find_transition_id` method returns the transition ID that contains a given input or output ID.\n\nThe `scan` method scans the ledger for records that match a given view key, and the `get_unspent_records` method searches for unspent records in the ledger. The `transaction_broadcast` method broadcasts a deploy or execute transaction to the Aleo network.\n\nHere's an example of how to use the client to get the latest block height:\n\n```rust\nlet client = AleoAPIClient::<Testnet3>::testnet3();\nlet latest_height = client.latest_height().unwrap();\nprintln!(\"Latest block height: {}\", latest_height);\n```\n\nIn summary, this code provides a convenient way to interact with the Aleo blockchain, allowing users to query and retrieve various types of data, such as blocks, transactions, and programs.",
      "questions": "1. **Question:** What is the purpose of the `AleoAPIClient` struct and its methods?\n   **Answer:** The `AleoAPIClient` struct is used to interact with the Aleo network. It provides methods to fetch information about blocks, transactions, and other data from the network, such as the latest block height, latest block hash, and specific blocks or transactions.\n\n2. **Question:** What is the `scan` method used for in the `AleoAPIClient` struct?\n   **Answer:** The `scan` method is used to search the ledger for records that match a given view key. It takes a view key, a range of block heights to search, and an optional maximum number of records to return. The method returns a vector of matching records.\n\n3. **Question:** How does the `get_unspent_records` method work, and what is its purpose?\n   **Answer:** The `get_unspent_records` method searches the ledger for unspent records associated with a given private key. It takes a reference to a private key, a range of block heights to search, an optional maximum number of gates, and an optional list of specified amounts. The method returns a vector of unspent records that match the criteria."
    },
    {
      "fileName": "mod.rs",
      "filePath": "rust/src/api/mod.rs",
      "url": "https://github.com/AleoHQ/aleo/rust/src/api/mod.rs",
      "summary": "This code defines an API client for interacting with Aleo Network endpoints. The main component of this code is the `AleoAPIClient` struct, which is a generic structure that takes a type parameter `N` implementing the `Network` trait. The `AleoAPIClient` struct contains a `ureq::Agent` for making HTTP requests, a `base_url` for the API, a `network_id` for identifying the network being interacted with, and a `PhantomData` field to associate the struct with the generic `Network` type parameter.\n\nThe `AleoAPIClient` struct provides several methods for creating new instances:\n\n- `new(base_url: &str, chain: &str)`: Creates a new `AleoAPIClient` with the specified `base_url` and `chain`. It ensures that the `base_url` starts with \"http://\" or \"https://\".\n- `testnet3()`: Creates a new `AleoAPIClient` for interacting with the testnet3 network using the default base URL \"https://vm.aleo.org/api\".\n- `local_testnet3(port: &str)`: Creates a new `AleoAPIClient` for interacting with the local testnet3 network using the specified port.\n\nAdditionally, the `AleoAPIClient` struct provides two getter methods for accessing its fields:\n\n- `base_url(&self) -> &str`: Returns the base URL of the API client.\n- `network_id(&self) -> &str`: Returns the network ID being interacted with.\n\nThis code also imports a `blocking` module, which presumably contains a blocking implementation of the API client. The `blocking` module is imported and re-exported using `pub use blocking::*;`, making its contents available to users of this module.\n\nIn the larger project, the `AleoAPIClient` struct would be used to interact with Aleo Network endpoints, allowing developers to easily make requests to the network and retrieve information. For example, a developer might create an instance of `AleoAPIClient` for the testnet3 network and use it to query information about transactions, blocks, or accounts.",
      "questions": "1. **Question:** What is the purpose of the `AleoAPIClient` struct and how is it used in the Aleo project?\n   **Answer:** The `AleoAPIClient` struct is used for interacting with the Aleo Network endpoints. It provides an API client for the Aleo Beacon API, allowing developers to make requests to the Aleo network and retrieve information.\n\n2. **Question:** What are the different methods provided by the `AleoAPIClient` struct for initializing a new instance?\n   **Answer:** The `AleoAPIClient` provides three methods for initializing a new instance: `new()`, which takes a base URL and a chain as arguments; `testnet3()`, which initializes an instance for the testnet3 network; and `local_testnet3()`, which initializes an instance for a local testnet3 network with a specified port.\n\n3. **Question:** What is the purpose of the `PhantomData<N>` field in the `AleoAPIClient` struct?\n   **Answer:** The `_network: PhantomData<N>` field is used to associate the `AleoAPIClient` struct with a specific network type `N`. This allows the compiler to enforce type safety and ensure that the correct network type is used when interacting with the API client."
    }
  ],
  "folders": [],
  "summary": "The code in this folder provides an API client for interacting with the Aleo blockchain, allowing users to query and retrieve various types of data, such as blocks, transactions, and programs. The main component is the `AleoAPIClient` struct, which is a generic structure that takes a type parameter `N` implementing the `Network` trait. It contains a `ureq::Agent` for making HTTP requests, a `base_url` for the API, a `network_id` for identifying the network being interacted with, and a `PhantomData` field to associate the struct with the generic `Network` type parameter.\n\nThe `AleoAPIClient` provides methods for creating new instances, such as `new`, `testnet3`, and `local_testnet3`. It also provides getter methods for accessing its fields, such as `base_url` and `network_id`. Additionally, the `blocking` module is imported and re-exported, which contains a blocking implementation of the API client.\n\nThe `blocking.rs` file defines an `AleoAPIClient` for interacting with the Aleo blockchain. It provides methods to query the blockchain for information such as the latest block height, hash, and block data. It also allows users to retrieve specific blocks, transactions, and programs by their respective identifiers.\n\nHere's an example of how to use the client to get the latest block height:\n\n```rust\nlet client = AleoAPIClient::<Testnet3>::testnet3();\nlet latest_height = client.latest_height().unwrap();\nprintln!(\"Latest block height: {}\", latest_height);\n```\n\nIn the larger project, the `AleoAPIClient` struct would be used to interact with Aleo Network endpoints, allowing developers to easily make requests to the network and retrieve information. For example, a developer might create an instance of `AleoAPIClient` for the testnet3 network and use it to query information about transactions, blocks, or accounts.",
  "questions": ""
}